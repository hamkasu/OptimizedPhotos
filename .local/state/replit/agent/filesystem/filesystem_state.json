{"file_contents":{"__init__.py":{"content":"\"\"\"\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n\"\"\"\r\n\r\nimport os\r\nfrom flask import Flask\r\nimport sqlite3\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_login import LoginManager\r\nfrom flask_migrate import Migrate\r\n# Add this import near the top with other imports\r\nfrom flask_wtf.csrf import CSRFProtect\r\n\r\n# Try to load dotenv, but don't fail if it's not available\r\ntry:\r\n    from dotenv import load_dotenv\r\n    load_dotenv()\r\nexcept ImportError:\r\n    pass\r\n\r\n# Try to import company version info, provide fallback if missing\r\ntry:\r\n    from photovault.version import (\r\n        get_version, get_version_info, get_full_version, \r\n        get_company_info, get_app_title, get_copyright\r\n    )\r\nexcept ImportError:\r\n    # Fallback company functions if version.py is missing\r\n    def get_version():\r\n        return \"1.0.0\"\r\n    \r\n    def get_version_info():\r\n        return {\r\n            \"version\": \"1.0.0\",\r\n            \"build\": \"2025.09.10\",\r\n            \"author\": \"Calmic Sdn Bhd\",\r\n            \"company\": \"Calmic Sdn Bhd\",\r\n            \"description\": \"Professional Photo Storage and Management Platform\",\r\n            \"website\": \"https://calmic.com.my\",\r\n            \"support_email\": \"postmaster@calmic.com,my\"\r\n        }\r\n    \r\n    def get_full_version():\r\n        return \"PhotoVault v1.0.0 (Build 2025.09.10) - Calmic Sdn Bhd\"\r\n    \r\n    def get_company_info():\r\n        return {\r\n            \"name\": \"Calmic Sdn Bhd\",\r\n            \"description\": \"Leading provider of digital solutions and enterprise software\",\r\n            \"website\": \"https://calmic.com.my\",\r\n            \"support_email\": \"postmaster@calmic.com\",\r\n            \"address\": \"Malaysia\",\r\n            \"established\": \"2022\"\r\n        }\r\n    \r\n    def get_app_title():\r\n        return \"PhotoVault by Calmic Sdn Bhd\"\r\n    \r\n    def get_copyright():\r\n        return \"© 2025 Calmic Sdn Bhd. All rights reserved.\"\r\n\r\n# Initialize extensions\r\ndb = SQLAlchemy()\r\nlogin_manager = LoginManager()\r\nmigrate = Migrate()\r\n\r\ndef create_app():\r\n    \"\"\"Create and configure the Flask application\"\"\"\r\n    app = Flask(__name__)\r\n\r\n    csrf = CSRFProtect()\r\n    csrf.init_app(app)\r\n\r\n    # Load production configuration if deployed\r\n    is_production = os.getenv('REPLIT_DEPLOYMENT') == '1'\r\n    if is_production:\r\n        try:\r\n            from config import ProductionConfig\r\n            app.config.from_object(ProductionConfig)\r\n            print(\"✓ Production configuration loaded\")\r\n        except ImportError:\r\n            pass\r\n        \r\n        # Validate critical production settings\r\n        if not app.config.get('SECRET_KEY'):\r\n            secret_key = os.environ.get('SECRET_KEY')\r\n            if not secret_key:\r\n                raise RuntimeError(\"SECRET_KEY must be set in production environment\")\r\n            app.config['SECRET_KEY'] = secret_key\r\n            \r\n        if not app.config.get('SQLALCHEMY_DATABASE_URI'):\r\n            database_url = os.environ.get('DATABASE_URL')\r\n            if not database_url:\r\n                raise RuntimeError(\"DATABASE_URL must be set in production environment\")\r\n            app.config['SQLALCHEMY_DATABASE_URI'] = database_url\r\n    else:\r\n        # Development configuration\r\n        app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')\r\n        app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///photovault.db')\r\n    \r\n    # Common configuration\r\n    app.config.setdefault('SQLALCHEMY_TRACK_MODIFICATIONS', False)\r\n    app.config.setdefault('UPLOAD_FOLDER', os.getenv('UPLOAD_FOLDER', 'photovault/static/uploads'))\r\n    app.config.setdefault('MAX_CONTENT_LENGTH', 16 * 1024 * 1024)  # 16MB\r\n    \r\n    # Session configuration\r\n    app.config.setdefault('SESSION_COOKIE_HTTPONLY', True)\r\n    app.config.setdefault('SESSION_COOKIE_SAMESITE', 'Lax')\r\n    \r\n    # Initialize extensions with app\r\n    db.init_app(app)\r\n    login_manager.init_app(app)\r\n    login_manager.login_view = 'auth.login'\r\n    migrate.init_app(app, db)\r\n    \r\n    # Create upload folder\r\n    try:\r\n        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\r\n        print(f\"✓ Upload folder created/verified: {app.config['UPLOAD_FOLDER']}\")\r\n    except Exception as e:\r\n        print(f\"Warning: Could not create upload folder: {e}\")\r\n    \r\n    # Register blueprints\r\n    try:\r\n        from photovault.routes.auth import auth_bp\r\n        from photovault.routes.main import main_bp\r\n        from photovault.routes.photo import photo_bp\r\n        from photovault.routes.admin import admin_bp\r\n        from photovault.routes.superuser import superuser_bp\r\n        \r\n        app.register_blueprint(auth_bp)\r\n        app.register_blueprint(main_bp) \r\n        app.register_blueprint(photo_bp)\r\n        app.register_blueprint(admin_bp)\r\n        app.register_blueprint(superuser_bp)\r\n        \r\n        print(\"✓ All blueprints registered successfully\")\r\n    except Exception as e:\r\n        print(f\"Warning: Error registering blueprints: {e}\")\r\n    \r\n    # Create database tables (skip in production if using migrations)\r\n    with app.app_context():\r\n        try:\r\n            if not is_production:\r\n                db.create_all()\r\n                print(\"✓ Database tables created\")\r\n            else:\r\n                print(\"✓ Production mode: skipping db.create_all() (use migrations)\")\r\n        except Exception as e:\r\n            print(f\"Warning: Error with database setup: {e}\")\r\n    \r\n    # Add security headers\r\n    @app.after_request\r\n    def add_security_headers(response):\r\n        response.headers['X-Content-Type-Options'] = 'nosniff'\r\n        response.headers['X-Frame-Options'] = 'DENY'\r\n        response.headers['X-XSS-Protection'] = '1; mode=block'\r\n        \r\n        # Add production security headers if configured\r\n        if 'SECURITY_HEADERS' in app.config:\r\n            for header, value in app.config['SECURITY_HEADERS'].items():\r\n                response.headers[header] = value\r\n        \r\n        return response\r\n    \r\n    # --- Company Context Processor ---\r\n    @app.context_processor\r\n    def inject_company_context():\r\n        \"\"\"Make company and version information available to all templates\"\"\"\r\n        return {\r\n            'app_version': get_version(),\r\n            'app_version_info': get_version_info(),\r\n            'app_full_version': get_full_version(),\r\n            'company_info': get_company_info(),\r\n            'app_title': get_app_title(),\r\n            'company_copyright': get_copyright()\r\n        }\r\n    \r\n    print(\"✓ PhotoVault by Calmic Sdn Bhd created successfully\")\r\n    return app","size_bytes":6921},"main.py":{"content":"\"\"\"\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n\"\"\"\r\n\r\n\r\nfrom photovault import create_app, db\r\nimport click\r\n\r\napp = create_app()\r\n\r\n@app.cli.command()\r\n@click.option('--username', prompt='Username', help='The username for the superuser')\r\n@click.option('--email', prompt='Email', help='The email for the superuser')\r\n@click.option('--password', prompt='Password', hide_input=True, confirmation_prompt=True, help='The password for the superuser')\r\ndef create_superuser(username, email, password):\r\n    \"\"\"Create a superuser.\"\"\"\r\n    from photovault.models import User\r\n    \r\n    with app.app_context():\r\n        existing_user = User.query.filter((User.username == username) | (User.email == email)).first()\r\n        if existing_user:\r\n            click.echo(f'Error: User with username \"{username}\" or email \"{email}\" already exists.')\r\n            return\r\n        \r\n        user = User(\r\n            username=username,\r\n            email=email,\r\n            is_superuser=True,\r\n            is_admin=True\r\n        )\r\n        user.set_password(password)\r\n        \r\n        db.session.add(user)\r\n        db.session.commit()\r\n        \r\n        click.echo(f'Superuser \"{username}\" created successfully!')\r\n\r\n@app.cli.command()\r\ndef init_db():\r\n    \"\"\"Initialize the database.\"\"\"\r\n    with app.app_context():\r\n        db.create_all()\r\n        click.echo('Database initialized!')\r\n\r\n@app.cli.command()\r\ndef stats():\r\n    \"\"\"Show database statistics.\"\"\"\r\n    from photovault.models import User, Photo\r\n    \r\n    with app.app_context():\r\n        user_count = User.query.count()\r\n        admin_count = User.query.filter_by(is_admin=True).count()\r\n        superuser_count = User.query.filter_by(is_superuser=True).count()\r\n        \r\n        all_photos = Photo.query.all()\r\n        photo_count = len(all_photos)\r\n        edited_count = sum(1 for photo in all_photos if photo.edited_filename is not None)\r\n        total_size = sum(photo.file_size or 0 for photo in all_photos)\r\n        \r\n        click.echo('=== PhotoVault Statistics ===')\r\n        click.echo(f'Users: {user_count} (Admins: {admin_count}, Superusers: {superuser_count})')\r\n        click.echo(f'Photos: {photo_count} (Edited: {edited_count})')\r\n        click.echo(f'Storage: {total_size / 1024 / 1024:.2f} MB')\r\n\r\n@app.cli.command()\r\n@click.argument('username')\r\ndef make_admin(username):\r\n    \"\"\"Make a user an admin.\"\"\"\r\n    from photovault.models import User\r\n    \r\n    with app.app_context():\r\n        user = User.query.filter_by(username=username).first()\r\n        if not user:\r\n            click.echo(f'Error: User \"{username}\" not found.')\r\n            return\r\n        \r\n        user.is_admin = True\r\n        db.session.commit()\r\n        click.echo(f'User \"{username}\" is now an admin!')\r\n\r\n@app.cli.command()\r\n@click.argument('username')\r\ndef make_superuser(username):\r\n    \"\"\"Make a user a superuser.\"\"\"\r\n    from photovault.models import User\r\n    \r\n    with app.app_context():\r\n        user = User.query.filter_by(username=username).first()\r\n        if not user:\r\n            click.echo(f'Error: User \"{username}\" not found.')\r\n            return\r\n        \r\n        user.is_superuser = True\r\n        user.is_admin = True\r\n        db.session.commit()\r\n        click.echo(f'User \"{username}\" is now a superuser!')\r\n\r\n@app.cli.command()\r\ndef list_users():\r\n    \"\"\"List all users with their roles.\"\"\"\r\n    from photovault.models import User\r\n    \r\n    with app.app_context():\r\n        users = User.query.order_by(User.created_at.desc()).all()\r\n        \r\n        if not users:\r\n            click.echo('No users found.')\r\n            return\r\n        \r\n        click.echo('=== All Users ===')\r\n        for user in users:\r\n            role = 'Superuser' if user.is_superuser else 'Admin' if user.is_admin else 'User'\r\n            click.echo(f'{user.id:3d} | {user.username:20} | {user.email:30} | {role}')\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True, host='0.0.0.0', port=5000)","size_bytes":4275},"models.py":{"content":"# photovault/models.py\r\n\r\nfrom datetime import datetime\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_login import UserMixin\r\n\r\ndb = SQLAlchemy()\r\n\r\nclass User(UserMixin, db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(80), unique=True, nullable=False)\r\n    email = db.Column(db.String(120), unique=True, nullable=False)\r\n    password_hash = db.Column(db.String(255), nullable=False)\r\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\r\n    \r\n    # Relationship with photos\r\n    photos = db.relationship('Photo', backref='owner', lazy=True, cascade='all, delete-orphan')\r\n\r\nclass Photo(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    filename = db.Column(db.String(255), nullable=False)\r\n    original_name = db.Column(db.String(255), nullable=False)\r\n    file_path = db.Column(db.String(500), nullable=False)\r\n    file_size = db.Column(db.Integer, nullable=False)\r\n    upload_date = db.Column(db.DateTime, default=datetime.utcnow)\r\n    \r\n    # Foreign key to user\r\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\r\n    \r\n    def __repr__(self):\r\n        return f'<Photo {self.original_name}>'","size_bytes":1209},"version.py":{"content":"\"\"\"\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n\"\"\"\r\n\r\n# photovault/version.py\r\n\"\"\"Version information for PhotoVault by Calmic Sdn Bhd\"\"\"\r\n\r\n__version__ = \"1.0.0\"\r\n__build__ = \"2025.09.10\"\r\n__author__ = \"Calmic Sdn Bhd\"\r\n__company__ = \"Calmic Sdn Bhd\"\r\n__description__ = \"Professional Photo Storage and Management Platform\"\r\n__website__ = \"https://calmic.com.my\"  # Update with your actual website\r\n__support_email__ = \"postmaster@calmic.com.my\"  # Update with your actual email\r\n\r\n# Company Information\r\nCOMPANY_INFO = {\r\n    \"name\": \"Calmic Sdn Bhd\",\r\n    \"description\": \"Leading provider of digital solutions and enterprise software\",\r\n    \"website\": \"https://calmic.com.my\",\r\n    \"support_email\": \"postmaster@calmic.com\",\r\n    \"address\": \"Malaysia\",  # Update with your actual address\r\n    \"established\": \"2022\"\r\n}\r\n\r\n# Version history\r\nVERSION_HISTORY = {\r\n    \"1.0.0\": {\r\n        \"date\": \"2025-09-10\",\r\n        \"changes\": [\r\n            \"Initial release by Calmic Sdn Bhd\",\r\n            \"Professional photo upload and storage system\",\r\n            \"Advanced photo editing tools with canvas support\",\r\n            \"Enterprise-grade user authentication and authorization\",\r\n            \"Comprehensive admin panel with user management\",\r\n            \"Real-time statistics and analytics dashboard\",\r\n            \"Role-based access control (Admin/Superuser)\",\r\n            \"Secure file handling with MIME type validation\",\r\n            \"Mobile-responsive design for all devices\",\r\n            \"Company branding and customization features\"\r\n        ]\r\n    }\r\n}\r\n\r\ndef get_version():\r\n    \"\"\"Get the current version string\"\"\"\r\n    return __version__\r\n\r\ndef get_version_info():\r\n    \"\"\"Get detailed version information\"\"\"\r\n    return {\r\n        \"version\": __version__,\r\n        \"build\": __build__,\r\n        \"author\": __author__,\r\n        \"company\": __company__,\r\n        \"description\": __description__,\r\n        \"website\": __website__,\r\n        \"support_email\": __support_email__\r\n    }\r\n\r\ndef get_company_info():\r\n    \"\"\"Get company information\"\"\"\r\n    return COMPANY_INFO\r\n\r\ndef get_full_version():\r\n    \"\"\"Get full version string with build info\"\"\"\r\n    return f\"PhotoVault v{__version__} (Build {__build__}) - {__company__}\"\r\n\r\ndef get_app_title():\r\n    \"\"\"Get application title with company name\"\"\"\r\n    return f\"PhotoVault by {__company__}\"\r\n\r\ndef get_copyright():\r\n    \"\"\"Get copyright string\"\"\"\r\n    return f\"© 2025 {__company__}. All rights reserved.\"","size_bytes":2790},"models/__init__.py":{"content":"\"\"\"\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n\"\"\"\r\n\r\n# photovault/models/__init__.py\r\nfrom photovault import db, login_manager\r\nfrom flask_login import UserMixin\r\nfrom werkzeug.security import generate_password_hash, check_password_hash\r\nfrom datetime import datetime\r\n\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    return User.query.get(int(user_id))\r\n\r\nclass User(UserMixin, db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(80), unique=True, nullable=False)\r\n    email = db.Column(db.String(120), unique=True, nullable=False)\r\n    password_hash = db.Column(db.String(200))\r\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\r\n    # --- Add is_admin field ---\r\n    is_admin = db.Column(db.Boolean, default=False, nullable=False, server_default='0')\r\n    # --- Add is_superuser field ---\r\n    is_superuser = db.Column(db.Boolean, default=False, nullable=False, server_default='0')\r\n    # --- End Add admin/superuser fields ---\r\n    photos = db.relationship('Photo', backref='owner', lazy=True, cascade='all, delete-orphan')\r\n\r\n    def set_password(self, password):\r\n        self.password_hash = generate_password_hash(password)\r\n\r\n    def check_password(self, password):\r\n        return check_password_hash(self.password_hash, password)\r\n\r\nclass Photo(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    filename = db.Column(db.String(255), nullable=False) # This will now point to the original\r\n    original_filename = db.Column(db.String(255))\r\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\r\n    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)\r\n    description = db.Column(db.Text)\r\n    tags = db.Column(db.String(500))\r\n    file_size = db.Column(db.Integer)\r\n    width = db.Column(db.Integer)\r\n    height = db.Column(db.Integer)\r\n    # --- Add field to track edited version ---\r\n    edited_filename = db.Column(db.String(255), nullable=True) # Stores the filename of the edited image\r\n    # --- End Add field ---\r\n","size_bytes":2383},"routes/admin.py":{"content":"# photovault/routes/admin.py\r\nfrom flask import Blueprint, render_template, redirect, url_for, flash, request, abort, current_app, jsonify\r\nfrom flask_login import login_required, current_user\r\nfrom sqlalchemy import func, case, text\r\nfrom photovault import db\r\nfrom photovault.models import User, Photo\r\nfrom datetime import datetime, timedelta\r\nimport os\r\nimport logging\r\n\r\n# Set up logging\r\nlogger = logging.getLogger(__name__)\r\n\r\nadmin_bp = Blueprint('admin', __name__, url_prefix='/admin')\r\n\r\ndef superuser_required(f):\r\n    \"\"\"Decorator to require superuser access\"\"\"\r\n    def wrap(*args, **kwargs):\r\n        if not current_user.is_authenticated or not current_user.is_superuser:\r\n            logger.warning(f\"Unauthorized superuser access attempt by user {current_user.id if current_user.is_authenticated else 'anonymous'}\")\r\n            flash(\"You do not have permission to access that page.\", \"danger\")\r\n            abort(403)  # Forbidden\r\n        return f(*args, **kwargs)\r\n    wrap.__name__ = f.__name__  # Important for endpoint naming\r\n    return wrap\r\n\r\ndef admin_required(f):\r\n    \"\"\"Decorator to require either admin or superuser access\"\"\"\r\n    def wrap(*args, **kwargs):\r\n        if not current_user.is_authenticated or not (current_user.is_admin or current_user.is_superuser):\r\n            logger.warning(f\"Unauthorized admin access attempt by user {current_user.id if current_user.is_authenticated else 'anonymous'}\")\r\n            flash(\"You do not have permission to access that page.\", \"danger\")\r\n            abort(403)  # Forbidden\r\n        return f(*args, **kwargs)\r\n    wrap.__name__ = f.__name__\r\n    return wrap\r\n\r\n@admin_bp.route('/')\r\n@admin_bp.route('/dashboard')\r\n@login_required\r\n@admin_required\r\ndef dashboard():\r\n    \"\"\"Enhanced admin dashboard showing user list with statistics\"\"\"\r\n    # Get all users\r\n    users = User.query.order_by(User.created_at.desc()).all()\r\n    \r\n    # Calculate statistics for each user manually (no complex SQLAlchemy)\r\n    users_with_stats = []\r\n    total_storage_all = 0\r\n    total_photos_all = 0\r\n    total_edited_all = 0\r\n    \r\n    for user in users:\r\n        # Get user's photos\r\n        user_photos = Photo.query.filter_by(user_id=user.id).all()\r\n        \r\n        # Calculate stats manually\r\n        total_photos = len(user_photos)\r\n        edited_photos = 0\r\n        total_size = 0\r\n        \r\n        for photo in user_photos:\r\n            if photo.edited_filename is not None:\r\n                edited_photos += 1\r\n            if photo.file_size:\r\n                total_size += photo.file_size\r\n        \r\n        # Add to totals\r\n        total_storage_all += total_size\r\n        total_photos_all += total_photos\r\n        total_edited_all += edited_photos\r\n        \r\n        # Create tuple matching the expected format\r\n        users_with_stats.append((user, total_photos, edited_photos, total_size))\r\n    \r\n    # Overall statistics\r\n    total_users = len(users)\r\n    \r\n    stats = {\r\n        'total_users': total_users,\r\n        'total_photos': total_photos_all,\r\n        'total_edited': total_edited_all,\r\n        'total_storage': total_storage_all,\r\n        'total_storage_mb': round(total_storage_all / (1024 * 1024), 2) if total_storage_all else 0\r\n    }\r\n    \r\n    return render_template('admin/dashboard.html', users_with_stats=users_with_stats, stats=stats)\r\n\r\n@admin_bp.route('/api/statistics')\r\n@login_required\r\n@admin_required\r\ndef api_statistics():\r\n    \"\"\"JSON API endpoint for dashboard statistics\"\"\"\r\n    # Get all users\r\n    users = User.query.order_by(User.created_at.desc()).all()\r\n    \r\n    # Calculate statistics for each user manually \r\n    total_storage_all = 0\r\n    total_photos_all = 0\r\n    total_edited_all = 0\r\n    \r\n    for user in users:\r\n        # Get user's photos\r\n        user_photos = Photo.query.filter_by(user_id=user.id).all()\r\n        \r\n        # Calculate stats manually\r\n        total_photos = len(user_photos)\r\n        edited_photos = 0\r\n        total_size = 0\r\n        \r\n        for photo in user_photos:\r\n            if photo.edited_filename is not None:\r\n                edited_photos += 1\r\n            if photo.file_size:\r\n                total_size += photo.file_size\r\n        \r\n        # Add to totals\r\n        total_storage_all += total_size\r\n        total_photos_all += total_photos\r\n        total_edited_all += edited_photos\r\n    \r\n    # Overall statistics\r\n    total_users = len(users)\r\n    \r\n    stats = {\r\n        'total_users': total_users,\r\n        'total_photos': total_photos_all,\r\n        'total_edited': total_edited_all,\r\n        'total_storage': total_storage_all,\r\n        'total_storage_mb': round(total_storage_all / (1024 * 1024), 2) if total_storage_all else 0\r\n    }\r\n    \r\n    return jsonify(stats)\r\n\r\n@admin_bp.route('/user/<int:user_id>')\r\n@login_required\r\n@admin_required\r\ndef user_detail(user_id):\r\n    \"\"\"View detailed information about a specific user\"\"\"\r\n    user = User.query.get_or_404(user_id)\r\n    \r\n    # Get user's photos\r\n    photos = Photo.query.filter_by(user_id=user_id).order_by(Photo.uploaded_at.desc()).all()\r\n    \r\n    # Calculate statistics manually\r\n    total_photos = len(photos)\r\n    edited_photos = 0\r\n    total_size = 0\r\n    \r\n    for photo in photos:\r\n        if photo.edited_filename is not None:\r\n            edited_photos += 1\r\n        if photo.file_size:\r\n            total_size += photo.file_size\r\n    \r\n    user_stats = {\r\n        'total_photos': total_photos,\r\n        'edited_photos': edited_photos,\r\n        'original_photos': total_photos - edited_photos,\r\n        'total_size': total_size,\r\n        'total_size_mb': round(total_size / (1024 * 1024), 2) if total_size > 0 else 0,\r\n        'avg_file_size': round(total_size / total_photos / 1024, 2) if total_photos > 0 else 0  # in KB\r\n    }\r\n    \r\n    return render_template('admin/user_detail.html', user=user, photos=photos, user_stats=user_stats)\r\n\r\n@admin_bp.route('/user/<int:user_id>/edit', methods=['GET', 'POST'])\r\n@login_required\r\n@admin_required\r\ndef edit_user(user_id):\r\n    \"\"\"Edit user information\"\"\"\r\n    user = User.query.get_or_404(user_id)\r\n    \r\n    if request.method == 'POST':\r\n        new_username = request.form.get('username', '').strip()\r\n        new_email = request.form.get('email', '').strip()\r\n        \r\n        # Validate input\r\n        if not new_username or not new_email:\r\n            flash(\"Username and email are required.\", \"danger\")\r\n            return redirect(url_for('admin.edit_user', user_id=user_id))\r\n        \r\n        # Check if username or email is taken by another user\r\n        existing_user = User.query.filter(\r\n            User.id != user_id,\r\n            (User.username == new_username) | (User.email == new_email)\r\n        ).first()\r\n        \r\n        if existing_user:\r\n            flash(\"Username or email already exists.\", \"danger\")\r\n            return redirect(url_for('admin.edit_user', user_id=user_id))\r\n        \r\n        # Update user information\r\n        user.username = new_username\r\n        user.email = new_email\r\n        \r\n        db.session.commit()\r\n        flash(f\"User information updated successfully.\", \"success\")\r\n        return redirect(url_for('admin.user_detail', user_id=user_id))\r\n    \r\n    return render_template('admin/edit_user.html', user=user)\r\n\r\n@admin_bp.route('/user/<int:user_id>/reset-password', methods=['POST'])\r\n@login_required\r\n@superuser_required  # Only superusers can reset passwords\r\ndef reset_user_password(user_id):\r\n    \"\"\"Reset a user's password\"\"\"\r\n    user = User.query.get_or_404(user_id)\r\n    \r\n    new_password = request.form.get('new_password', '').strip()\r\n    if not new_password:\r\n        flash(\"New password is required.\", \"danger\")\r\n        return redirect(url_for('admin.user_detail', user_id=user_id))\r\n    \r\n    if len(new_password) < 6:\r\n        flash(\"Password must be at least 6 characters long.\", \"danger\")\r\n        return redirect(url_for('admin.user_detail', user_id=user_id))\r\n    \r\n    user.set_password(new_password)\r\n    db.session.commit()\r\n    \r\n    flash(f\"Password reset for user {user.username}.\", \"success\")\r\n    return redirect(url_for('admin.user_detail', user_id=user_id))\r\n\r\n@admin_bp.route('/users/toggle_admin/<int:user_id>', methods=['POST'])\r\n@login_required\r\n@superuser_required # Only superusers can toggle admin status\r\ndef toggle_admin(user_id):\r\n    \"\"\"Toggle the admin status of a user\"\"\"\r\n    user = User.query.get_or_404(user_id)\r\n    \r\n    # Prevent users from modifying superusers unless they are also superusers\r\n    if user.is_superuser and not current_user.is_superuser:\r\n        flash(\"You cannot modify superuser accounts.\", \"danger\")\r\n        return redirect(url_for('admin.dashboard'))\r\n        \r\n    user.is_admin = not user.is_admin\r\n    db.session.commit()\r\n    status = \"granted\" if user.is_admin else \"revoked\"\r\n    flash(f\"Admin status {status} for user {user.username}.\", \"success\")\r\n    return redirect(url_for('admin.dashboard'))\r\n\r\n@admin_bp.route('/users/toggle_superuser/<int:user_id>', methods=['POST'])\r\n@login_required\r\n@superuser_required # Only superusers can toggle superuser status\r\ndef toggle_superuser(user_id):\r\n    \"\"\"Toggle the superuser status of a user\"\"\"\r\n    user = User.query.get_or_404(user_id)\r\n    \r\n    # Critical: Prevent a superuser from removing their own superuser status\r\n    if user.id == current_user.id:\r\n        flash(\"You cannot change your own superuser status.\", \"warning\")\r\n        return redirect(url_for('admin.dashboard'))\r\n\r\n    user.is_superuser = not user.is_superuser\r\n    db.session.commit()\r\n    status = \"granted\" if user.is_superuser else \"revoked\"\r\n    flash(f\"Superuser status {status} for user {user.username}.\", \"success\")\r\n    return redirect(url_for('admin.dashboard'))\r\n\r\n@admin_bp.route('/users/delete/<int:user_id>', methods=['POST'])\r\n@login_required\r\n@superuser_required # Only superusers can delete users\r\ndef delete_user(user_id):\r\n    \"\"\"Delete a user and their photos\"\"\"\r\n    user = User.query.get_or_404(user_id)\r\n    \r\n    # Prevent users from deleting superusers\r\n    if user.is_superuser:\r\n        flash(\"Superuser accounts cannot be deleted.\", \"danger\")\r\n        return redirect(url_for('admin.dashboard'))\r\n        \r\n    # Prevent users from deleting themselves\r\n    if user.id == current_user.id:\r\n        flash(\"You cannot delete your own account.\", \"danger\")\r\n        return redirect(url_for('admin.dashboard'))\r\n\r\n    username = user.username\r\n    \r\n    # Delete user's photos from the filesystem\r\n    for photo in user.photos:\r\n        # Delete original file\r\n        filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], photo.filename)\r\n        if os.path.exists(filepath):\r\n            try:\r\n                os.remove(filepath)\r\n            except OSError as e:\r\n                print(f\"Error deleting file {filepath}: {e}\")\r\n        \r\n        # Delete edited file if it exists\r\n        if photo.edited_filename:\r\n            edited_filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], photo.edited_filename)\r\n            if os.path.exists(edited_filepath):\r\n                try:\r\n                    os.remove(edited_filepath)\r\n                except OSError as e:\r\n                    print(f\"Error deleting edited file {edited_filepath}: {e}\")\r\n    \r\n    db.session.delete(user)\r\n    db.session.commit()\r\n    flash(f\"User {username} and all their photos deleted successfully.\", \"success\")\r\n    return redirect(url_for('admin.dashboard'))\r\n\r\n@admin_bp.route('/photo/<int:photo_id>/delete', methods=['POST'])\r\n@login_required\r\n@admin_required\r\ndef delete_photo(photo_id):\r\n    \"\"\"Delete a specific photo (admin can delete any photo)\"\"\"\r\n    photo = Photo.query.get_or_404(photo_id)\r\n    user_id = photo.user_id\r\n    \r\n    # Delete files from filesystem\r\n    original_filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], photo.filename)\r\n    if os.path.exists(original_filepath):\r\n        try:\r\n            os.remove(original_filepath)\r\n        except OSError as e:\r\n            print(f\"Error deleting original file {original_filepath}: {e}\")\r\n    \r\n    if photo.edited_filename:\r\n        edited_filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], photo.edited_filename)\r\n        if os.path.exists(edited_filepath):\r\n            try:\r\n                os.remove(edited_filepath)\r\n            except OSError as e:\r\n                print(f\"Error deleting edited file {edited_filepath}: {e}\")\r\n    \r\n    db.session.delete(photo)\r\n    db.session.commit()\r\n    \r\n    flash(\"Photo deleted successfully.\", \"success\")\r\n    return redirect(url_for('admin.user_detail', user_id=user_id))\r\n\r\n@admin_bp.route('/statistics')\r\n@login_required\r\n@admin_required\r\ndef statistics():\r\n    \"\"\"View detailed system statistics with simple, reliable queries\"\"\"\r\n    try:\r\n        # Simple user statistics - avoid complex aggregations\r\n        all_users = User.query.all()\r\n        total_users = len(all_users)\r\n        admin_users = sum(1 for user in all_users if user.is_admin)\r\n        superusers = sum(1 for user in all_users if user.is_superuser)\r\n        \r\n        # Recent users (last 30 days)\r\n        thirty_days_ago = datetime.utcnow() - timedelta(days=30)\r\n        recent_users = 0\r\n        for user in all_users:\r\n            if user.created_at and user.created_at >= thirty_days_ago:\r\n                recent_users += 1\r\n        \r\n        # Simple photo statistics\r\n        all_photos = Photo.query.all()\r\n        total_photos = len(all_photos)\r\n        edited_photos = 0\r\n        total_size = 0\r\n        recent_uploads = 0\r\n        \r\n        for photo in all_photos:\r\n            if photo.edited_filename is not None:\r\n                edited_photos += 1\r\n            if photo.file_size:\r\n                total_size += photo.file_size\r\n            if photo.uploaded_at and photo.uploaded_at >= thirty_days_ago:\r\n                recent_uploads += 1\r\n        \r\n        # Most active users - simple approach\r\n        user_photo_counts = {}\r\n        for photo in all_photos:\r\n            user_id = photo.user_id\r\n            if user_id not in user_photo_counts:\r\n                user_photo_counts[user_id] = 0\r\n            user_photo_counts[user_id] += 1\r\n        \r\n        # Get top 10 most active users\r\n        most_active_users = []\r\n        for user in all_users:\r\n            photo_count = user_photo_counts.get(user.id, 0)\r\n            if photo_count > 0:\r\n                most_active_users.append((user.username, photo_count))\r\n        \r\n        # Sort by photo count and take top 10\r\n        most_active_users.sort(key=lambda x: x[1], reverse=True)\r\n        most_active_users = most_active_users[:10]\r\n        \r\n        # Create statistics dictionary\r\n        statistics = {\r\n            'users': {\r\n                'total': total_users,\r\n                'admins': admin_users,\r\n                'superusers': superusers,\r\n                'recent': recent_users\r\n            },\r\n            'photos': {\r\n                'total': total_photos,\r\n                'edited': edited_photos,\r\n                'original_only': total_photos - edited_photos,\r\n                'recent_uploads': recent_uploads\r\n            },\r\n            'storage': {\r\n                'total_bytes': total_size,\r\n                'total_mb': round(total_size / (1024 * 1024), 2) if total_size > 0 else 0,\r\n                'total_gb': round(total_size / (1024 * 1024 * 1024), 2) if total_size > 0 else 0,\r\n                'avg_file_size_kb': round(total_size / total_photos / 1024, 2) if total_photos > 0 else 0\r\n            },\r\n            'most_active_users': most_active_users\r\n        }\r\n        \r\n        logger.info(f\"Statistics loaded successfully by admin {current_user.username}\")\r\n        print(f\"Statistics data: {statistics}\")  # Debug output\r\n        \r\n        return render_template('admin/statistics.html', stats=statistics)\r\n    \r\n    except Exception as e:\r\n        logger.error(f\"Error loading statistics: {str(e)}\")\r\n        print(f\"Statistics error: {str(e)}\")  # Debug output\r\n        \r\n        # Provide fallback empty statistics\r\n        fallback_stats = {\r\n            'users': {'total': 0, 'admins': 0, 'superusers': 0, 'recent': 0},\r\n            'photos': {'total': 0, 'edited': 0, 'original_only': 0, 'recent_uploads': 0},\r\n            'storage': {'total_bytes': 0, 'total_mb': 0, 'total_gb': 0, 'avg_file_size_kb': 0},\r\n            'most_active_users': []\r\n        }\r\n        \r\n        flash(\"Error loading statistics. Showing basic information.\", \"warning\")\r\n        return render_template('admin/statistics.html', stats=fallback_stats)\r\n\r\n@admin_bp.route('/profile')\r\n@login_required\r\n@admin_required # Both admins and superusers can view their profile\r\ndef profile():\r\n    \"\"\"View admin/superuser profile\"\"\"\r\n    return render_template('admin/profile.html', user=current_user)","size_bytes":16766},"routes/auth.py":{"content":"\"\"\"\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n\"\"\"\r\n\r\nfrom flask import Blueprint, render_template, request, flash, redirect, url_for, session\r\nfrom flask_login import login_user, logout_user, login_required, current_user\r\nfrom werkzeug.security import check_password_hash, generate_password_hash\r\nfrom photovault.models import User, db\r\nimport re\r\n\r\nauth_bp = Blueprint('auth', __name__)\r\n\r\ndef validate_email(email):\r\n    \"\"\"Validate email format\"\"\"\r\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\r\n    return re.match(pattern, email) is not None\r\n\r\ndef validate_password(password):\r\n    \"\"\"Validate password strength\"\"\"\r\n    if len(password) < 8:\r\n        return False, \"Password must be at least 8 characters long\"\r\n    if not re.search(r'[A-Z]', password):\r\n        return False, \"Password must contain at least one uppercase letter\"\r\n    if not re.search(r'[a-z]', password):\r\n        return False, \"Password must contain at least one lowercase letter\"\r\n    if not re.search(r'\\d', password):\r\n        return False, \"Password must contain at least one number\"\r\n    return True, \"Password is valid\"\r\n\r\n@auth_bp.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    \"\"\"User login route\"\"\"\r\n    if current_user.is_authenticated:\r\n        return redirect(url_for('main.dashboard'))\r\n    \r\n    if request.method == 'POST':\r\n        username = request.form.get('username', '').strip()\r\n        password = request.form.get('password', '')\r\n        remember = bool(request.form.get('remember'))\r\n        \r\n        if not username or not password:\r\n            flash('Please enter both username and password.', 'error')\r\n            return render_template('login.html')\r\n        \r\n        # Try to find user by username or email\r\n        user = User.query.filter(\r\n            (User.username == username) | (User.email == username)\r\n        ).first()\r\n        \r\n        if user and check_password_hash(user.password_hash, password):\r\n            login_user(user, remember=remember)\r\n            \r\n            # Get next page from URL parameter\r\n            next_page = request.args.get('next')\r\n            if next_page and next_page.startswith('/'):\r\n                flash(f'Welcome back, {user.username}!', 'success')\r\n                return redirect(next_page)\r\n            else:\r\n                flash(f'Welcome back, {user.username}!', 'success')\r\n                return redirect(url_for('main.dashboard'))\r\n        else:\r\n            flash('Invalid username or password.', 'error')\r\n    \r\n    return render_template('login.html')\r\n\r\n@auth_bp.route('/register', methods=['GET', 'POST'])\r\ndef register():\r\n    \"\"\"User registration route\"\"\"\r\n    if current_user.is_authenticated:\r\n        return redirect(url_for('main.dashboard'))\r\n    \r\n    if request.method == 'POST':\r\n        username = request.form.get('username', '').strip()\r\n        email = request.form.get('email', '').strip().lower()\r\n        password = request.form.get('password', '')\r\n        confirm_password = request.form.get('confirm_password', '')\r\n        \r\n        # Basic validation\r\n        if not all([username, email, password, confirm_password]):\r\n            flash('All fields are required.', 'error')\r\n            return render_template('register.html')\r\n        \r\n        # Username validation\r\n        if len(username) < 3:\r\n            flash('Username must be at least 3 characters long.', 'error')\r\n            return render_template('register.html')\r\n        \r\n        if not re.match(r'^[a-zA-Z0-9_]+$', username):\r\n            flash('Username can only contain letters, numbers, and underscores.', 'error')\r\n            return render_template('register.html')\r\n        \r\n        # Email validation\r\n        if not validate_email(email):\r\n            flash('Please enter a valid email address.', 'error')\r\n            return render_template('register.html')\r\n        \r\n        # Password validation\r\n        is_valid, message = validate_password(password)\r\n        if not is_valid:\r\n            flash(message, 'error')\r\n            return render_template('register.html')\r\n        \r\n        if password != confirm_password:\r\n            flash('Passwords do not match.', 'error')\r\n            return render_template('register.html')\r\n        \r\n        # Check if user already exists\r\n        existing_user = User.query.filter(\r\n            (User.username == username) | (User.email == email)\r\n        ).first()\r\n        \r\n        if existing_user:\r\n            if existing_user.username == username:\r\n                flash('Username already exists. Please choose a different one.', 'error')\r\n            else:\r\n                flash('Email already registered. Please use a different email.', 'error')\r\n            return render_template('register.html')\r\n        \r\n        try:\r\n            # Create new user\r\n            user = User(\r\n                username=username,\r\n                email=email,\r\n                password_hash=generate_password_hash(password)\r\n            )\r\n            \r\n            db.session.add(user)\r\n            db.session.commit()\r\n            \r\n            flash('Registration successful! You can now log in.', 'success')\r\n            return redirect(url_for('auth.login'))\r\n            \r\n        except Exception as e:\r\n            db.session.rollback()\r\n            flash('An error occurred during registration. Please try again.', 'error')\r\n            return render_template('register.html')\r\n    \r\n    return render_template('register.html')\r\n\r\n@auth_bp.route('/logout')\r\n@login_required\r\ndef logout():\r\n    \"\"\"User logout route\"\"\"\r\n    try:\r\n        # Store username before logout\r\n        username = current_user.username if current_user.is_authenticated else None\r\n        \r\n        # Clear any sensitive session data\r\n        session.clear()\r\n        \r\n        # Logout user\r\n        logout_user()\r\n        \r\n        # Flash message with username if available\r\n        if username:\r\n            flash(f'Goodbye, {username}! You have been logged out successfully.', 'info')\r\n        else:\r\n            flash('You have been logged out successfully.', 'info')\r\n        \r\n        # Redirect to login page\r\n        return redirect(url_for('auth.login'))\r\n        \r\n    except Exception as e:\r\n        # Log the error (in production, use proper logging)\r\n        print(f\"Logout error: {e}\")\r\n        \r\n        # Force clear session and redirect\r\n        session.clear()\r\n        flash('You have been logged out.', 'info')\r\n        return redirect(url_for('auth.login'))","size_bytes":6842},"routes/main.py":{"content":"\"\"\"\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n\"\"\"\r\n\r\nfrom flask import Blueprint, render_template, redirect, url_for, flash, request, current_app, jsonify\r\nfrom flask_login import login_required, current_user\r\nfrom photovault.models import Photo, User, db\r\nfrom sqlalchemy import func\r\nimport os\r\n\r\nmain_bp = Blueprint('main', __name__)\r\n\r\n@main_bp.route('/')\r\ndef index():\r\n    \"\"\"Home page - redirect to dashboard if authenticated\"\"\"\r\n    if current_user.is_authenticated:\r\n        return redirect(url_for('main.dashboard'))\r\n    return render_template('index.html')\r\n\r\n@main_bp.route('/about')\r\ndef about():\r\n    \"\"\"Company about page\"\"\"\r\n    return render_template('about.html')\r\n\r\n@main_bp.route('/dashboard')\r\n@login_required\r\ndef dashboard():\r\n    \"\"\"User dashboard with statistics and recent photos\"\"\"\r\n    \r\n    # Get user's recent photos\r\n    user_photos = Photo.query.filter_by(user_id=current_user.id)\\\r\n                            .order_by(Photo.uploaded_at.desc())\\\r\n                            .limit(12).all()\r\n    \r\n    # Calculate user statistics\r\n    total_photos = Photo.query.filter_by(user_id=current_user.id).count()\r\n    edited_photos = Photo.query.filter_by(user_id=current_user.id)\\\r\n                              .filter(Photo.edited_filename.isnot(None)).count()\r\n    \r\n    # Calculate total storage used by user\r\n    total_size_result = db.session.query(func.sum(Photo.file_size))\\\r\n                                 .filter_by(user_id=current_user.id).scalar()\r\n    total_size = total_size_result or 0\r\n    \r\n    # Create stats object for template\r\n    stats = {\r\n        'total_photos': total_photos,\r\n        'edited_photos': edited_photos,\r\n        'original_photos': total_photos - edited_photos,\r\n        'total_size': total_size,\r\n        'total_size_mb': round(total_size / (1024 * 1024), 2) if total_size > 0 else 0,\r\n        'total_users': User.query.count() if current_user.is_admin else None,\r\n        'storage_usage_percent': min(100, (total_size / (100 * 1024 * 1024)) * 100) if total_size > 0 else 0\r\n    }\r\n    \r\n    return render_template('dashboard.html', photos=user_photos, stats=stats)\r\n\r\n@main_bp.route('/originals')\r\n@login_required\r\ndef originals():\r\n    \"\"\"View all original photos for the current user\"\"\"\r\n    page = request.args.get('page', 1, type=int)\r\n    per_page = 20  # Number of photos per page\r\n    \r\n    photos = Photo.query.filter_by(user_id=current_user.id)\\\r\n                       .order_by(Photo.uploaded_at.desc())\\\r\n                       .paginate(page=page, per_page=per_page, error_out=False)\r\n    \r\n    return render_template('originals.html', photos=photos)\r\n\r\n@main_bp.route('/photo/<int:photo_id>')\r\n@login_required\r\ndef view_photo(photo_id):\r\n    \"\"\"View a specific photo\"\"\"\r\n    photo = Photo.query.filter_by(id=photo_id, user_id=current_user.id).first_or_404()\r\n    return render_template('view_photo.html', photo=photo)\r\n\r\n@main_bp.route('/editor/<int:photo_id>')\r\n@login_required\r\ndef editor(photo_id):\r\n    \"\"\"Photo editor for markup and editing\"\"\"\r\n    photo = Photo.query.filter_by(id=photo_id, user_id=current_user.id).first_or_404()\r\n    return render_template('editor.html', photo=photo)\r\n\r\n@main_bp.route('/rename/<int:photo_id>', methods=['POST'])\r\n@login_required\r\ndef rename_photo(photo_id):\r\n    \"\"\"Rename a photo's display name\"\"\"\r\n    photo = Photo.query.filter_by(id=photo_id, user_id=current_user.id).first_or_404()\r\n    \r\n    new_name = request.form.get('new_name', '').strip()\r\n    if not new_name:\r\n        flash('Photo name cannot be empty', 'error')\r\n        return redirect(request.referrer or url_for('main.dashboard'))\r\n    \r\n    # Update the original filename (display name)\r\n    photo.original_filename = new_name\r\n    \r\n    try:\r\n        db.session.commit()\r\n        flash(f'Photo renamed to \"{new_name}\" successfully!', 'success')\r\n    except Exception as e:\r\n        db.session.rollback()\r\n        flash('Error renaming photo. Please try again.', 'error')\r\n    \r\n    return redirect(request.referrer or url_for('main.dashboard'))\r\n\r\n@main_bp.route('/upload', methods=['GET', 'POST'])\r\n@login_required\r\ndef upload():\r\n    \"\"\"Upload page for photos\"\"\"\r\n    if request.method == 'POST':\r\n        # Check if this is an AJAX request (camera capture)\r\n        is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'\r\n        \r\n        # Handle file upload\r\n        if 'file' not in request.files and 'files[]' not in request.files:\r\n            if is_ajax:\r\n                return jsonify({'success': False, 'message': 'No files provided'}), 400\r\n            flash('No files provided', 'error')\r\n            return redirect(url_for('main.upload'))\r\n        \r\n        # Get files (handle both 'file' and 'files[]' for compatibility)\r\n        files = []\r\n        if 'file' in request.files:\r\n            file = request.files['file']\r\n            if file and file.filename != '':\r\n                files.append(file)\r\n        if 'files[]' in request.files:\r\n            files.extend(request.files.getlist('files[]'))\r\n        \r\n        if not files:\r\n            if is_ajax:\r\n                return jsonify({'success': False, 'message': 'No valid files selected'}), 400\r\n            flash('No valid files selected', 'error')\r\n            return redirect(url_for('main.upload'))\r\n        \r\n        uploaded_files = []\r\n        errors = []\r\n        \r\n        for file in files:\r\n            if file and file.filename != '':\r\n                # Import upload logic from photo route\r\n                from photovault.routes.photo import allowed_file\r\n                from werkzeug.utils import secure_filename\r\n                from PIL import Image\r\n                import os, random, string\r\n                \r\n                if allowed_file(file.filename):\r\n                    try:\r\n                        # Generate unique filename\r\n                        file_ext = file.filename.rsplit('.', 1)[1].lower() if '.' in file.filename else ''\r\n                        random_chars = ''.join(random.choices(string.ascii_letters + string.digits, k=6))\r\n                        filename = f\"{random_chars}.{file_ext}\" if file_ext else random_chars\r\n                        filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)\r\n                        \r\n                        # Save file\r\n                        file.save(filepath)\r\n                        \r\n                        # Get image dimensions\r\n                        with Image.open(filepath) as img:\r\n                            width, height = img.size\r\n                        \r\n                        # Create database entry\r\n                        photo = Photo(\r\n                            filename=filename,\r\n                            original_filename=secure_filename(file.filename),\r\n                            user_id=current_user.id,\r\n                            file_size=os.path.getsize(filepath),\r\n                            width=width,\r\n                            height=height\r\n                        )\r\n                        db.session.add(photo)\r\n                        uploaded_files.append(filename)\r\n                        \r\n                    except Exception as e:\r\n                        error_msg = f\"Error processing {file.filename}: {str(e)}\"\r\n                        errors.append(error_msg)\r\n                        if is_ajax:\r\n                            return jsonify({'success': False, 'message': error_msg}), 500\r\n                else:\r\n                    error_msg = f\"Invalid file type: {file.filename}\"\r\n                    errors.append(error_msg)\r\n                    if is_ajax:\r\n                        return jsonify({'success': False, 'message': error_msg}), 400\r\n        \r\n        try:\r\n            db.session.commit()\r\n            success_message = f'Successfully uploaded {len(uploaded_files)} file(s)!'\r\n            \r\n            # Return appropriate response based on request type\r\n            if is_ajax:\r\n                return jsonify({\r\n                    'success': True, \r\n                    'message': success_message,\r\n                    'uploaded_files': uploaded_files,\r\n                    'error_count': len(errors)\r\n                })\r\n            else:\r\n                if uploaded_files:\r\n                    flash(success_message, 'success')\r\n                if errors:\r\n                    for error in errors:\r\n                        flash(error, 'error')\r\n                return redirect(url_for('main.dashboard'))\r\n                \r\n        except Exception as e:\r\n            db.session.rollback()\r\n            error_msg = f'Database error: {str(e)}'\r\n            if is_ajax:\r\n                return jsonify({'success': False, 'message': error_msg}), 500\r\n            flash(error_msg, 'error')\r\n            return redirect(url_for('main.upload'))\r\n    \r\n    return render_template('upload.html')\r\n\r\n@main_bp.route('/profile')\r\n@login_required\r\ndef profile():\r\n    \"\"\"User profile page\"\"\"\r\n    user_stats = {\r\n        'total_photos': Photo.query.filter_by(user_id=current_user.id).count(),\r\n        'edited_photos': Photo.query.filter_by(user_id=current_user.id)\r\n                                  .filter(Photo.edited_filename.isnot(None)).count(),\r\n        'total_size': db.session.query(func.sum(Photo.file_size))\r\n                               .filter_by(user_id=current_user.id).scalar() or 0,\r\n        'member_since': current_user.created_at.strftime('%B %Y')\r\n    }\r\n    \r\n    return render_template('profile.html', stats=user_stats)","size_bytes":9856},"routes/photo.py":{"content":"\"\"\"\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n\"\"\"\r\n\r\n# photovault/routes/photo.py\r\nfrom flask import Blueprint, request, jsonify, current_app, send_file, url_for, abort\r\nfrom flask_login import login_required, current_user\r\nfrom werkzeug.utils import secure_filename\r\nfrom photovault import db\r\nfrom photovault.models import Photo\r\nfrom PIL import Image\r\nimport os\r\nimport uuid\r\nimport base64\r\nimport random\r\nimport string\r\nimport logging\r\n\r\nphoto_bp = Blueprint('photo', __name__, url_prefix='/api')\r\n\r\n# Configure logging\r\nlogger = logging.getLogger(__name__)\r\n\r\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}\r\nALLOWED_MIME_TYPES = {'image/png', 'image/jpeg', 'image/gif', 'image/webp'}\r\n\r\n# Maximum image dimensions to prevent zip bombs\r\nMAX_IMAGE_PIXELS = 178956970  # Equivalent to 8K image (8192 x 8192 x 2.75)\r\n\r\ndef allowed_file(filename):\r\n    \"\"\"Check if file extension is allowed\"\"\"\r\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\r\n\r\ndef validate_image_efficiently(file):\r\n    \"\"\"Validate image without loading full file into memory\"\"\"\r\n    try:\r\n        # Save current position\r\n        pos = file.tell()\r\n        \r\n        # Check file size first (before any processing)\r\n        file.seek(0, 2)  # Seek to end\r\n        file_size = file.tell()\r\n        file.seek(0)     # Reset to beginning\r\n        \r\n        max_size = current_app.config.get('MAX_CONTENT_LENGTH', 16 * 1024 * 1024)\r\n        if file_size > max_size:\r\n            file.seek(pos)\r\n            return False, f\"File exceeds maximum size of {max_size // (1024*1024)}MB\"\r\n        \r\n        if file_size == 0:\r\n            file.seek(pos)\r\n            return False, \"File is empty\"\r\n        \r\n        # Validate file header (magic bytes)\r\n        header = file.read(512)\r\n        file.seek(0)\r\n        \r\n        mime_type = None\r\n        if header.startswith(b'\\x89PNG\\r\\n\\x1a\\n'):\r\n            mime_type = 'image/png'\r\n        elif header.startswith(b'\\xff\\xd8\\xff'):\r\n            mime_type = 'image/jpeg'\r\n        elif header.startswith(b'GIF87a') or header.startswith(b'GIF89a'):\r\n            mime_type = 'image/gif'\r\n        elif header.startswith(b'RIFF') and header[8:12] == b'WEBP':\r\n            mime_type = 'image/webp'\r\n        \r\n        if mime_type not in ALLOWED_MIME_TYPES:\r\n            file.seek(pos)\r\n            return False, \"Invalid or unsupported image format\"\r\n        \r\n        # Use PIL to validate image and get dimensions without loading full image data\r\n        try:\r\n            with Image.open(file) as img:\r\n                # Get format and size without loading image data\r\n                width, height = img.size\r\n                format_name = img.format\r\n                \r\n                # Check for None dimensions\r\n                if width is None or height is None:\r\n                    file.seek(pos)\r\n                    return False, \"Could not determine image dimensions\"\r\n                \r\n                # Validate dimensions (prevent zip bombs and excessive memory usage)\r\n                if width * height > MAX_IMAGE_PIXELS:\r\n                    file.seek(pos)\r\n                    return False, \"Image dimensions too large (potential security risk)\"\r\n                \r\n                # Additional reasonable dimension limits\r\n                if width > 16384 or height > 16384:\r\n                    file.seek(pos)\r\n                    return False, \"Image width or height exceeds 16K pixels\"\r\n                \r\n                # Verify format matches header detection\r\n                expected_format = {\r\n                    'image/png': 'PNG',\r\n                    'image/jpeg': 'JPEG', \r\n                    'image/gif': 'GIF',\r\n                    'image/webp': 'WEBP'\r\n                }.get(mime_type)\r\n                \r\n                if format_name != expected_format:\r\n                    file.seek(pos)\r\n                    return False, \"File header doesn't match actual image format\"\r\n                    \r\n        except Exception as e:\r\n            file.seek(pos)\r\n            logger.warning(f\"Image validation error: {e}\")\r\n            return False, \"Corrupted or invalid image file\"\r\n        \r\n        # Reset file position\r\n        file.seek(pos)\r\n        return True, \"Valid image file\"\r\n        \r\n    except Exception as e:\r\n        # Ensure file position is reset even on unexpected errors\r\n        try:\r\n            file.seek(pos)\r\n        except:\r\n            pass\r\n        logger.error(f\"Image validation exception: {e}\")\r\n        return False, f\"Image validation failed: {str(e)}\"\r\n\r\ndef generate_secure_filename(original_filename):\r\n    \"\"\"Generate a secure, unique filename\"\"\"\r\n    # Get file extension\r\n    file_ext = ''\r\n    if '.' in original_filename:\r\n        file_ext = original_filename.rsplit('.', 1)[1].lower()\r\n        if file_ext not in ALLOWED_EXTENSIONS:\r\n            file_ext = 'jpg'  # Default fallback\r\n    else:\r\n        file_ext = 'jpg'  # Default extension if none provided\r\n    \r\n    # Generate cryptographically secure random filename\r\n    random_chars = ''.join(random.choices(string.ascii_letters + string.digits, k=12))\r\n    timestamp = str(int(__import__('time').time()))[-6:]  # Last 6 digits of timestamp\r\n    \r\n    return f\"{timestamp}_{random_chars}.{file_ext}\"\r\n\r\n@photo_bp.route('/upload', methods=['GET', 'POST'])\r\n@login_required\r\ndef upload():\r\n    \"\"\"Enhanced photo upload with comprehensive validation and error handling\"\"\"\r\n    if request.method == 'GET':\r\n        return jsonify({'error': 'GET method not supported. Use POST with files.'}), 405\r\n    \r\n    if 'files[]' not in request.files:\r\n        return jsonify({'error': 'No files provided'}), 400\r\n    \r\n    files = request.files.getlist('files[]')\r\n    if not files or all(f.filename == '' for f in files):\r\n        return jsonify({'error': 'No valid files selected'}), 400\r\n    \r\n    uploaded_files = []\r\n    errors = []\r\n    \r\n    # Check upload folder exists and is writable\r\n    upload_folder = current_app.config['UPLOAD_FOLDER']\r\n    if not os.path.exists(upload_folder):\r\n        try:\r\n            os.makedirs(upload_folder, mode=0o755, exist_ok=True)\r\n        except OSError as e:\r\n            logger.error(f\"Failed to create upload folder: {e}\")\r\n            return jsonify({'error': 'Server configuration error - upload folder inaccessible'}), 500\r\n    \r\n    # Process each file\r\n    for file_idx, file in enumerate(files):\r\n        if not file or file.filename == '':\r\n            errors.append(f\"File {file_idx + 1}: Empty file or filename\")\r\n            continue\r\n        \r\n        try:\r\n            # Secure the original filename for storage\r\n            secure_original = secure_filename(file.filename)\r\n            if not secure_original:\r\n                secure_original = f\"upload_{file_idx + 1}\"\r\n            \r\n            # Check file extension first (quick check)\r\n            if not allowed_file(file.filename):\r\n                errors.append(f\"File '{file.filename}': Invalid file type. Allowed: PNG, JPG, JPEG, GIF, WEBP\")\r\n                continue\r\n            \r\n            # Comprehensive image validation\r\n            is_valid, validation_message = validate_image_efficiently(file)\r\n            if not is_valid:\r\n                errors.append(f\"File '{file.filename}': {validation_message}\")\r\n                continue\r\n            \r\n            # Generate secure filename for storage\r\n            filename = generate_secure_filename(file.filename)\r\n            filepath = os.path.join(upload_folder, filename)\r\n            \r\n            # Ensure filename is unique (handle unlikely collision)\r\n            counter = 1\r\n            base_filename = filename\r\n            while os.path.exists(filepath):\r\n                name, ext = os.path.splitext(base_filename)\r\n                filename = f\"{name}_{counter}{ext}\"\r\n                filepath = os.path.join(upload_folder, filename)\r\n                counter += 1\r\n                if counter > 100:  # Prevent infinite loop\r\n                    errors.append(f\"File '{file.filename}': Could not generate unique filename\")\r\n                    break\r\n            else:\r\n                # Save file to disk\r\n                file.seek(0)  # Ensure we're at the beginning\r\n                file.save(filepath)\r\n                \r\n                # Verify file was saved correctly\r\n                if not os.path.exists(filepath) or os.path.getsize(filepath) == 0:\r\n                    errors.append(f\"File '{file.filename}': Failed to save to server\")\r\n                    continue\r\n                \r\n                # Get final image dimensions and file size\r\n                try:\r\n                    with Image.open(filepath) as img:\r\n                        width, height = img.size\r\n                    \r\n                    # Validate dimensions are not None\r\n                    if width is None or height is None:\r\n                        if os.path.exists(filepath):\r\n                            os.remove(filepath)\r\n                        errors.append(f\"File '{file.filename}': Could not determine image dimensions\")\r\n                        continue\r\n                    \r\n                    file_size = os.path.getsize(filepath)\r\n                    \r\n                    # Create database entry\r\n                    photo = Photo(\r\n                        filename=filename,\r\n                        original_filename=secure_original,\r\n                        user_id=current_user.id,\r\n                        file_size=file_size,\r\n                        width=width,\r\n                        height=height\r\n                    )\r\n                    \r\n                    db.session.add(photo)\r\n                    db.session.flush()  # Get the photo ID without committing\r\n                    \r\n                    uploaded_files.append({\r\n                        'id': photo.id,\r\n                        'filename': filename,\r\n                        'original': secure_original,\r\n                        'size': file_size,\r\n                        'dimensions': f\"{width}x{height}\"\r\n                    })\r\n                    \r\n                    logger.info(f\"User {current_user.username} uploaded {secure_original} ({file_size} bytes)\")\r\n                    \r\n                except Exception as img_error:\r\n                    # Clean up file if database entry fails\r\n                    if os.path.exists(filepath):\r\n                        try:\r\n                            os.remove(filepath)\r\n                        except OSError:\r\n                            pass\r\n                    errors.append(f\"File '{file.filename}': Error processing saved file - {str(img_error)}\")\r\n                    continue\r\n        \r\n        except Exception as e:\r\n            logger.error(f\"Unexpected error processing file '{file.filename}': {e}\")\r\n            errors.append(f\"File '{file.filename}': Unexpected server error\")\r\n            continue\r\n    \r\n    # Commit all successful uploads\r\n    try:\r\n        if uploaded_files:\r\n            db.session.commit()\r\n            logger.info(f\"Successfully committed {len(uploaded_files)} photo uploads for user {current_user.username}\")\r\n        else:\r\n            db.session.rollback()\r\n    except Exception as e:\r\n        db.session.rollback()\r\n        logger.error(f\"Database commit error for user {current_user.username}: {e}\")\r\n        \r\n        # Clean up any files that were saved\r\n        for file_info in uploaded_files:\r\n            filepath = os.path.join(upload_folder, file_info['filename'])\r\n            if os.path.exists(filepath):\r\n                try:\r\n                    os.remove(filepath)\r\n                except OSError:\r\n                    pass\r\n        \r\n        return jsonify({'success': False, 'error': 'Database error - uploads canceled'}), 500\r\n    \r\n    # Return appropriate response\r\n    if errors and not uploaded_files:\r\n        return jsonify({\r\n            'success': False, \r\n            'message': 'All uploads failed', \r\n            'errors': errors\r\n        }), 400\r\n    elif errors and uploaded_files:\r\n        return jsonify({\r\n            'success': True, \r\n            'message': f'{len(uploaded_files)} files uploaded successfully, {len(errors)} failed',\r\n            'files': uploaded_files, \r\n            'errors': errors\r\n        }), 207  # Multi-status\r\n    else:\r\n        return jsonify({\r\n            'success': True, \r\n            'message': f'Successfully uploaded {len(uploaded_files)} files',\r\n            'files': uploaded_files\r\n        }), 200\r\n\r\n@photo_bp.route('/photo/delete/<int:photo_id>', methods=['DELETE'])\r\n@login_required\r\ndef delete_photo(photo_id):\r\n    \"\"\"Delete a photo with proper cleanup and security checks\"\"\"\r\n    try:\r\n        photo = Photo.query.get_or_404(photo_id)\r\n        \r\n        # Security check - ensure user owns the photo\r\n        if photo.user_id != current_user.id:\r\n            logger.warning(f\"User {current_user.username} attempted to delete photo {photo_id} owned by user {photo.user_id}\")\r\n            return jsonify({'error': 'Unauthorized'}), 403\r\n        \r\n        upload_folder = current_app.config['UPLOAD_FOLDER']\r\n        \r\n        # Delete original file\r\n        original_filepath = os.path.join(upload_folder, photo.filename)\r\n        original_deleted = False\r\n        if os.path.exists(original_filepath):\r\n            try:\r\n                os.remove(original_filepath)\r\n                original_deleted = True\r\n            except OSError as e:\r\n                logger.error(f\"Error deleting original file {original_filepath}: {e}\")\r\n        \r\n        # Delete edited file if it exists\r\n        edited_deleted = True  # Assume success if no edited file\r\n        if photo.edited_filename:\r\n            edited_filepath = os.path.join(upload_folder, photo.edited_filename)\r\n            if os.path.exists(edited_filepath):\r\n                try:\r\n                    os.remove(edited_filepath)\r\n                except OSError as e:\r\n                    logger.error(f\"Error deleting edited file {edited_filepath}: {e}\")\r\n                    edited_deleted = False\r\n        \r\n        # Delete database record\r\n        db.session.delete(photo)\r\n        db.session.commit()\r\n        \r\n        logger.info(f\"User {current_user.username} deleted photo {photo.original_filename} (ID: {photo_id})\")\r\n        \r\n        response_data = {'success': True, 'message': 'Photo deleted successfully'}\r\n        if not original_deleted or not edited_deleted:\r\n            response_data['warning'] = 'Some files could not be deleted from disk'\r\n        \r\n        return jsonify(response_data), 200\r\n        \r\n    except Exception as e:\r\n        db.session.rollback()\r\n        logger.error(f\"Error deleting photo {photo_id} for user {current_user.username}: {e}\")\r\n        return jsonify({'error': 'Failed to delete photo', 'details': str(e)}), 500\r\n\r\n@photo_bp.route('/photo/bulk-delete', methods=['POST'])\r\n@login_required\r\ndef bulk_delete_photos():\r\n    \"\"\"Delete multiple photos at once with proper validation and cleanup\"\"\"\r\n    try:\r\n        data = request.json if request.is_json else request.form\r\n        if not data:\r\n            return jsonify({'error': 'No data provided'}), 400\r\n        \r\n        photo_ids = data.get('photo_ids', [])\r\n        if not photo_ids:\r\n            return jsonify({'error': 'No photo IDs provided'}), 400\r\n        \r\n        # Convert to integers and validate\r\n        try:\r\n            photo_ids = [int(pid) for pid in photo_ids if pid]\r\n        except (ValueError, TypeError):\r\n            return jsonify({'error': 'Invalid photo IDs format'}), 400\r\n        \r\n        if len(photo_ids) > 50:  # Safety limit\r\n            return jsonify({'error': 'Too many photos selected (maximum 50)'}), 400\r\n        \r\n        # Get photos owned by current user\r\n        photos = Photo.query.filter(\r\n            Photo.id.in_(photo_ids),\r\n            Photo.user_id == current_user.id\r\n        ).all()\r\n        \r\n        if not photos:\r\n            return jsonify({'error': 'No photos found or access denied'}), 404\r\n        \r\n        # Track deletion results\r\n        deleted_count = 0\r\n        file_errors = []\r\n        upload_folder = current_app.config['UPLOAD_FOLDER']\r\n        \r\n        # Delete files and database records\r\n        for photo in photos:\r\n            try:\r\n                # Delete original file\r\n                original_filepath = os.path.join(upload_folder, photo.filename)\r\n                if os.path.exists(original_filepath):\r\n                    try:\r\n                        os.remove(original_filepath)\r\n                    except OSError as e:\r\n                        file_errors.append(f\"Failed to delete {photo.original_filename}: {str(e)}\")\r\n                \r\n                # Delete edited file if it exists\r\n                if photo.edited_filename:\r\n                    edited_filepath = os.path.join(upload_folder, photo.edited_filename)\r\n                    if os.path.exists(edited_filepath):\r\n                        try:\r\n                            os.remove(edited_filepath)\r\n                        except OSError as e:\r\n                            file_errors.append(f\"Failed to delete edited version of {photo.original_filename}: {str(e)}\")\r\n                \r\n                # Delete from database\r\n                db.session.delete(photo)\r\n                deleted_count += 1\r\n                \r\n            except Exception as e:\r\n                logger.error(f\"Error processing photo {photo.id} for bulk delete: {e}\")\r\n                file_errors.append(f\"Failed to process {photo.original_filename}: {str(e)}\")\r\n        \r\n        # Commit database changes\r\n        db.session.commit()\r\n        \r\n        logger.info(f\"User {current_user.username} bulk deleted {deleted_count} photos\")\r\n        \r\n        response_data = {\r\n            'success': True,\r\n            'message': f'Successfully deleted {deleted_count} photo(s)',\r\n            'deleted_count': deleted_count,\r\n            'total_requested': len(photo_ids)\r\n        }\r\n        \r\n        if file_errors:\r\n            response_data['warnings'] = file_errors\r\n            response_data['message'] += f' (with {len(file_errors)} file deletion warnings)'\r\n        \r\n        return jsonify(response_data), 200\r\n        \r\n    except Exception as e:\r\n        db.session.rollback()\r\n        logger.error(f\"Error in bulk delete for user {current_user.username}: {e}\")\r\n        return jsonify({'error': 'Failed to delete photos', 'details': str(e)}), 500\r\n\r\n@photo_bp.route('/save-edit', methods=['POST'])\r\n@login_required\r\ndef save_edit():\r\n    \"\"\"Save edited photo with enhanced validation and error handling\"\"\"\r\n    try:\r\n        data = request.json\r\n        if not data:\r\n            return jsonify({'success': False, 'error': 'No data provided'}), 400\r\n        \r\n        photo_id = data.get('photo_id')\r\n        image_data = data.get('image_data')\r\n        \r\n        if not photo_id or not image_data:\r\n            return jsonify({'success': False, 'error': 'Missing photo ID or image data'}), 400\r\n        \r\n        photo = Photo.query.get_or_404(photo_id)\r\n        \r\n        # Security check\r\n        if photo.user_id != current_user.id:\r\n            logger.warning(f\"User {current_user.username} attempted to edit photo {photo_id} owned by user {photo.user_id}\")\r\n            return jsonify({'success': False, 'error': 'Unauthorized'}), 403\r\n        \r\n        # Validate and decode base64 image data\r\n        try:\r\n            if image_data.startswith('data:image'):\r\n                # Extract base64 data after the comma\r\n                header, encoded = image_data.split(',', 1)\r\n                # Validate header\r\n                if 'image/' not in header:\r\n                    return jsonify({'success': False, 'error': 'Invalid image data format'}), 400\r\n            else:\r\n                encoded = image_data\r\n            \r\n            # Decode base64\r\n            image_binary = base64.b64decode(encoded)\r\n            \r\n            # Validate decoded data size\r\n            if len(image_binary) == 0:\r\n                return jsonify({'success': False, 'error': 'Empty image data'}), 400\r\n            \r\n            max_size = current_app.config.get('MAX_CONTENT_LENGTH', 16 * 1024 * 1024)\r\n            if len(image_binary) > max_size:\r\n                return jsonify({'success': False, 'error': 'Edited image too large'}), 400\r\n            \r\n        except Exception as e:\r\n            logger.error(f\"Error decoding image data for photo {photo_id}: {e}\")\r\n            return jsonify({'success': False, 'error': 'Invalid image data encoding'}), 400\r\n        \r\n        # Generate filename for edited image\r\n        name, ext = os.path.splitext(photo.filename)\r\n        if not ext or not ext.startswith('.'):\r\n            ext = '.jpg'  # Default extension\r\n        \r\n        edited_filename = f\"{name}_edited_{uuid.uuid4().hex[:8]}{ext}\"\r\n        edited_filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], edited_filename)\r\n        \r\n        # Ensure unique filename\r\n        counter = 1\r\n        base_edited_filename = edited_filename\r\n        while os.path.exists(edited_filepath):\r\n            name_part, ext_part = os.path.splitext(base_edited_filename)\r\n            edited_filename = f\"{name_part}_{counter}{ext_part}\"\r\n            edited_filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], edited_filename)\r\n            counter += 1\r\n            if counter > 100:\r\n                return jsonify({'success': False, 'error': 'Could not generate unique filename'}), 500\r\n        \r\n        # Save the edited image\r\n        try:\r\n            with open(edited_filepath, 'wb') as f:\r\n                f.write(image_binary)\r\n            \r\n            # Verify file was written correctly\r\n            if not os.path.exists(edited_filepath) or os.path.getsize(edited_filepath) == 0:\r\n                return jsonify({'success': False, 'error': 'Failed to save edited image'}), 500\r\n            \r\n            # Validate the saved image\r\n            try:\r\n                with Image.open(edited_filepath) as img:\r\n                    # Just ensure it's a valid image\r\n                    img.verify()\r\n            except Exception:\r\n                # Clean up invalid file\r\n                if os.path.exists(edited_filepath):\r\n                    os.remove(edited_filepath)\r\n                return jsonify({'success': False, 'error': 'Saved image is corrupted'}), 400\r\n            \r\n        except OSError as e:\r\n            logger.error(f\"Error saving edited image {edited_filepath}: {e}\")\r\n            return jsonify({'success': False, 'error': 'Failed to save edited image to disk'}), 500\r\n        \r\n        # Clean up previous edited version if it exists\r\n        if photo.edited_filename:\r\n            old_edited_path = os.path.join(current_app.config['UPLOAD_FOLDER'], photo.edited_filename)\r\n            if os.path.exists(old_edited_path):\r\n                try:\r\n                    os.remove(old_edited_path)\r\n                except OSError as e:\r\n                    logger.warning(f\"Could not delete old edited file {old_edited_path}: {e}\")\r\n        \r\n        # Update database\r\n        photo.edited_filename = edited_filename\r\n        db.session.commit()\r\n        \r\n        logger.info(f\"User {current_user.username} saved edit for photo {photo.original_filename} (ID: {photo_id})\")\r\n        \r\n        return jsonify({\r\n            'success': True, \r\n            'message': 'Edit saved successfully', \r\n            'new_filename': edited_filename\r\n        }), 200\r\n        \r\n    except Exception as e:\r\n        db.session.rollback()\r\n        logger.error(f\"Unexpected error saving edit for photo {photo_id}: {e}\")\r\n        return jsonify({'success': False, 'error': 'Server error while saving edit'}), 500\r\n\r\n@photo_bp.route('/original/<int:photo_id>')\r\n@login_required\r\ndef get_original(photo_id):\r\n    \"\"\"Get original photo URL with security validation\"\"\"\r\n    try:\r\n        photo = Photo.query.get_or_404(photo_id)\r\n        \r\n        if photo.user_id != current_user.id:\r\n            abort(403)\r\n        \r\n        original_filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], photo.filename)\r\n        if not os.path.exists(original_filepath):\r\n            return jsonify({'error': 'Original file not found on server'}), 404\r\n        \r\n        return jsonify({\r\n            'original_url': url_for('static', filename=f'uploads/{photo.filename}'),\r\n            'filename': photo.original_filename,\r\n            'size': photo.file_size,\r\n            'dimensions': f\"{photo.width}x{photo.height}\" if photo.width and photo.height else None\r\n        }), 200\r\n        \r\n    except Exception as e:\r\n        logger.error(f\"Error getting original for photo {photo_id}: {e}\")\r\n        return jsonify({'error': 'Server error'}), 500\r\n\r\n@photo_bp.route('/download/<int:photo_id>')\r\n@login_required\r\ndef download(photo_id):\r\n    \"\"\"Download photo with enhanced security and options\"\"\"\r\n    try:\r\n        photo = Photo.query.get_or_404(photo_id)\r\n        \r\n        if photo.user_id != current_user.id:\r\n            logger.warning(f\"User {current_user.username} attempted to download photo {photo_id} owned by user {photo.user_id}\")\r\n            return jsonify({'error': 'Unauthorized'}), 403\r\n        \r\n        # Check if user wants original version\r\n        force_original = request.args.get('original', 'false').lower() == 'true'\r\n        \r\n        if force_original or not photo.edited_filename:\r\n            active_filename = photo.filename\r\n            download_name = photo.original_filename if photo.original_filename else photo.filename\r\n        else:\r\n            active_filename = photo.edited_filename\r\n            # For edited files, add suffix to indicate it's edited\r\n            base_name, ext = os.path.splitext(photo.original_filename if photo.original_filename else photo.filename)\r\n            download_name = f\"{base_name}_edited{ext}\"\r\n        \r\n        filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], active_filename)\r\n        \r\n        if not os.path.exists(filepath):\r\n            logger.error(f\"Download requested for missing file: {filepath}\")\r\n            return jsonify({'error': 'File not found on server'}), 404\r\n        \r\n        # Verify file integrity before sending\r\n        try:\r\n            if os.path.getsize(filepath) == 0:\r\n                return jsonify({'error': 'File is corrupted (empty)'}), 500\r\n        except OSError:\r\n            return jsonify({'error': 'File access error'}), 500\r\n        \r\n        logger.info(f\"User {current_user.username} downloaded {download_name} ({'original' if force_original else 'current'})\")\r\n        \r\n        return send_file(\r\n            filepath, \r\n            as_attachment=True, \r\n            download_name=download_name,\r\n            conditional=True  # Enable conditional requests for better performance\r\n        )\r\n        \r\n    except Exception as e:\r\n        logger.error(f\"Error downloading photo {photo_id}: {e}\")\r\n        return jsonify({'error': 'Download failed'}), 500","size_bytes":27371},"routes/superuser.py":{"content":"\"\"\"\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n\"\"\"\r\n\r\n# photovault/routes/superuser.py\r\nfrom flask import Blueprint, render_template, redirect, url_for, flash, request, abort\r\nfrom flask_login import login_required, current_user\r\nfrom photovault import db\r\nfrom photovault.models import User\r\nfrom datetime import datetime\r\n\r\nsuperuser_bp = Blueprint('superuser', __name__, url_prefix='/superuser')\r\n\r\ndef superuser_required(f):\r\n    \"\"\"Decorator to require superuser access\"\"\"\r\n    def wrap(*args, **kwargs):\r\n        if not current_user.is_authenticated or not current_user.is_superuser:\r\n            flash(\"Access denied. Superuser privileges required.\", \"danger\")\r\n            return redirect(url_for('main.index')) # Or redirect to login/dashboard\r\n        return f(*args, **kwargs)\r\n    wrap.__name__ = f.__name__\r\n    return wrap\r\n\r\n@superuser_bp.route('/')\r\n@superuser_bp.route('/dashboard')\r\n@login_required\r\n@superuser_required\r\ndef dashboard():\r\n    \"\"\"Superuser dashboard showing all users\"\"\"\r\n    users = User.query.order_by(User.created_at.desc()).all()\r\n    return render_template('superuser/dashboard.html', users=users)\r\n\r\n@superuser_bp.route('/users/toggle_superuser/<int:user_id>', methods=['POST'])\r\n@login_required\r\n@superuser_required\r\ndef toggle_superuser(user_id):\r\n    \"\"\"Toggle the superuser status of a user\"\"\"\r\n    user = User.query.get_or_404(user_id)\r\n    \r\n    # Prevent users from modifying their own superuser status via this route\r\n    if user.id == current_user.id:\r\n        flash(\"You cannot change your own superuser status here.\", \"warning\")\r\n        return redirect(url_for('superuser.dashboard'))\r\n\r\n    user.is_superuser = not user.is_superuser\r\n    db.session.commit()\r\n    status = \"granted\" if user.is_superuser else \"revoked\"\r\n    flash(f\"Superuser status {status} for user {user.username}.\", \"success\")\r\n    return redirect(url_for('superuser.dashboard'))\r\n\r\n@superuser_bp.route('/users/delete/<int:user_id>', methods=['POST'])\r\n@login_required\r\n@superuser_required\r\ndef delete_user(user_id):\r\n    \"\"\"Delete a user and their photos\"\"\"\r\n    user = User.query.get_or_404(user_id)\r\n    \r\n    # Prevent users from deleting themselves\r\n    if user.id == current_user.id:\r\n        flash(\"You cannot delete your own account.\", \"danger\")\r\n        return redirect(url_for('superuser.dashboard'))\r\n\r\n    username = user.username\r\n    db.session.delete(user)\r\n    db.session.commit()\r\n    flash(f\"User {username} deleted successfully.\", \"success\")\r\n    return redirect(url_for('superuser.dashboard'))\r\n","size_bytes":2868},"routes/upload.py":{"content":"import os, uuid\r\n\r\ndef secure_filename(filename):\r\n    # Use Werkzeug's secure_filename or similar\r\n    from werkzeug.utils import secure_filename\r\n    return secure_filename(filename)\r\n\r\ndef handle_upload(file):\r\n    filename = secure_filename(file.filename)\r\n    ext = os.path.splitext(filename)[1]\r\n    random_name = f\"{uuid.uuid4().hex}{ext}\"\r\n    file.save(os.path.join(upload_folder, random_name))","size_bytes":403},"utils/__init__.py":{"content":"# photovault/utils/__init__.py\r\n# Empty file to make utils a Python package","size_bytes":75},"utils/file_handler.py":{"content":"# photovault/utils/file_handler.py\r\n\r\nimport os\r\nfrom flask import current_app\r\nfrom werkzeug.utils import secure_filename\r\nimport uuid\r\nfrom PIL import Image\r\nimport io\r\n\r\ndef validate_image_file(file):\r\n    \"\"\"\r\n    Validate uploaded image file\r\n    \r\n    Args:\r\n        file: FileStorage object from Flask request\r\n        \r\n    Returns:\r\n        bool: True if valid image file, False otherwise\r\n    \"\"\"\r\n    # Check file exists and has filename\r\n    if not file or not file.filename:\r\n        return False\r\n    \r\n    # Check file type by MIME type\r\n    allowed_types = [\r\n        'image/jpeg', \r\n        'image/jpg', \r\n        'image/png', \r\n        'image/gif', \r\n        'image/webp'\r\n    ]\r\n    \r\n    if file.content_type not in allowed_types:\r\n        return False\r\n    \r\n    # Check file extension\r\n    allowed_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.webp'}\r\n    file_ext = os.path.splitext(secure_filename(file.filename))[1].lower()\r\n    \r\n    if file_ext not in allowed_extensions:\r\n        return False\r\n    \r\n    # Check file size (16MB max)\r\n    file.seek(0, os.SEEK_END)\r\n    file_size = file.tell()\r\n    file.seek(0)  # Reset file pointer\r\n    \r\n    max_size = 16 * 1024 * 1024  # 16MB\r\n    if file_size > max_size:\r\n        return False\r\n    \r\n    # Optional: Validate actual image content\r\n    try:\r\n        file.seek(0)\r\n        image = Image.open(file)\r\n        image.verify()  # Verify it's a valid image\r\n        file.seek(0)  # Reset file pointer again\r\n        return True\r\n    except Exception:\r\n        file.seek(0)  # Reset file pointer on error\r\n        return False\r\n\r\ndef save_uploaded_file(file, filename):\r\n    \"\"\"\r\n    Save uploaded file to the upload directory\r\n    \r\n    Args:\r\n        file: FileStorage object from Flask request\r\n        filename: String filename to save as\r\n        \r\n    Returns:\r\n        str: Full path to saved file, or None if error\r\n    \"\"\"\r\n    try:\r\n        # Get upload directory\r\n        upload_folder = current_app.config.get('UPLOAD_FOLDER')\r\n        if not upload_folder:\r\n            current_app.logger.error('UPLOAD_FOLDER not configured')\r\n            return None\r\n        \r\n        # Ensure upload directory exists\r\n        os.makedirs(upload_folder, exist_ok=True)\r\n        \r\n        # Create full file path\r\n        file_path = os.path.join(upload_folder, filename)\r\n        \r\n        # Save the file\r\n        file.save(file_path)\r\n        \r\n        # Verify file was saved\r\n        if os.path.exists(file_path):\r\n            current_app.logger.info(f'File saved successfully: {filename}')\r\n            return file_path\r\n        else:\r\n            current_app.logger.error(f'File not found after save: {filename}')\r\n            return None\r\n            \r\n    except Exception as e:\r\n        current_app.logger.error(f'Error saving file {filename}: {str(e)}')\r\n        return None\r\n\r\ndef generate_unique_filename(original_filename):\r\n    \"\"\"\r\n    Generate a unique filename while preserving the original extension\r\n    \r\n    Args:\r\n        original_filename: Original filename from upload\r\n        \r\n    Returns:\r\n        str: Unique filename with original extension\r\n    \"\"\"\r\n    # Secure the filename\r\n    safe_filename = secure_filename(original_filename)\r\n    \r\n    # Get file extension\r\n    _, file_ext = os.path.splitext(safe_filename)\r\n    \r\n    # Generate unique name with UUID\r\n    unique_name = str(uuid.uuid4().hex)\r\n    \r\n    # Combine with original extension\r\n    return f\"{unique_name}{file_ext}\"\r\n\r\ndef get_file_size_mb(file_path):\r\n    \"\"\"\r\n    Get file size in megabytes\r\n    \r\n    Args:\r\n        file_path: Path to file\r\n        \r\n    Returns:\r\n        float: File size in MB\r\n    \"\"\"\r\n    try:\r\n        size_bytes = os.path.getsize(file_path)\r\n        size_mb = size_bytes / (1024 * 1024)\r\n        return round(size_mb, 2)\r\n    except Exception:\r\n        return 0.0\r\n\r\ndef create_thumbnail(file_path, thumbnail_size=(150, 150)):\r\n    \"\"\"\r\n    Create thumbnail for uploaded image\r\n    \r\n    Args:\r\n        file_path: Path to original image\r\n        thumbnail_size: Tuple of (width, height) for thumbnail\r\n        \r\n    Returns:\r\n        str: Path to thumbnail file, or None if error\r\n    \"\"\"\r\n    try:\r\n        # Open image\r\n        with Image.open(file_path) as image:\r\n            # Create thumbnail\r\n            image.thumbnail(thumbnail_size, Image.Resampling.LANCZOS)\r\n            \r\n            # Generate thumbnail filename\r\n            base_path, ext = os.path.splitext(file_path)\r\n            thumbnail_path = f\"{base_path}_thumb{ext}\"\r\n            \r\n            # Save thumbnail\r\n            image.save(thumbnail_path, optimize=True, quality=85)\r\n            \r\n            return thumbnail_path\r\n            \r\n    except Exception as e:\r\n        current_app.logger.error(f'Error creating thumbnail: {str(e)}')\r\n        return None\r\n\r\ndef delete_file_safely(file_path):\r\n    \"\"\"\r\n    Safely delete a file\r\n    \r\n    Args:\r\n        file_path: Path to file to delete\r\n        \r\n    Returns:\r\n        bool: True if deleted successfully, False otherwise\r\n    \"\"\"\r\n    try:\r\n        if os.path.exists(file_path):\r\n            os.remove(file_path)\r\n            return True\r\n        return False\r\n    except Exception as e:\r\n        current_app.logger.error(f'Error deleting file {file_path}: {str(e)}')\r\n        return False\r\n\r\ndef get_image_dimensions(file_path):\r\n    \"\"\"\r\n    Get image dimensions\r\n    \r\n    Args:\r\n        file_path: Path to image file\r\n        \r\n    Returns:\r\n        tuple: (width, height) or (0, 0) if error\r\n    \"\"\"\r\n    try:\r\n        with Image.open(file_path) as image:\r\n            return image.size\r\n    except Exception:\r\n        return (0, 0)","size_bytes":5672},"utils/security.py":{"content":"from flask_limiter import Limiter\r\nfrom flask_limiter.util import get_remote_address\r\n\r\nlimiter = Limiter(\r\n    key_func=get_remote_address,\r\n    default_limits=[\"200 per day\", \"50 per hour\"]\r\n)\r\n\r\n# In auth.py routes:\r\n@auth_bp.route('/login', methods=['GET', 'POST'])\r\n@limiter.limit(\"5 per minute\")  # Prevent brute force\r\ndef login():\r\n    # ... existing code","size_bytes":363},"static/css/style.css":{"content":"/*\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n*/\r\n\r\n/* PhotoVault - Ultra Conservative Professional Styling */\r\n\r\n/* Typography - Muted and Professional */\r\nbody {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\r\n    font-size: 14px;\r\n    line-height: 1.6;\r\n    color: #495057;\r\n    background-color: #fafbfc;\r\n    font-weight: 400;\r\n}\r\n\r\n/* Ultra Conservative Color Palette */\r\n:root {\r\n    --primary-color: #495057;           /* Muted dark gray */\r\n    --secondary-color: #868e96;         /* Light gray */\r\n    --success-color: #51a351;           /* Muted green */\r\n    --info-color: #5bc0de;              /* Muted blue */\r\n    --warning-color: #f0ad4e;           /* Muted orange */\r\n    --danger-color: #d9534f;            /* Muted red */\r\n    --light-bg: #fafbfc;                /* Very light background */\r\n    --lighter-bg: #ffffff;              /* White */\r\n    --border-color: #e1e5e9;            /* Very light border */\r\n    --text-muted: #6c757d;              /* Muted text */\r\n    --text-dark: #495057;               /* Dark text */\r\n}\r\n\r\n/* Company Branding - Very Subtle */\r\n.navbar-brand {\r\n    font-weight: 500;\r\n    font-size: 1.2rem;\r\n    padding: 0.5rem 0;\r\n    color: #ffffff !important;\r\n}\r\n\r\n.navbar-brand img {\r\n    border-radius: 2px;\r\n    opacity: 0.9;\r\n}\r\n\r\n.brand-text {\r\n    line-height: 1.3;\r\n}\r\n\r\n.brand-name {\r\n    font-size: 1.2rem;\r\n    font-weight: 500;\r\n    color: #ffffff;\r\n    margin-bottom: -1px;\r\n}\r\n\r\n.company-name {\r\n    font-size: 0.7rem;\r\n    color: #ced4da;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.2px;\r\n}\r\n\r\n/* Navigation - Subtle and Professional */\r\n.navbar-dark {\r\n    background-color: var(--primary-color) !important;\r\n    border-bottom: 1px solid #dee2e6;\r\n    box-shadow: none;\r\n}\r\n\r\n.navbar-dark .navbar-nav .nav-link {\r\n    color: rgba(255,255,255,0.85) !important;\r\n    font-weight: 400;\r\n    padding: 0.5rem 0.875rem;\r\n    border-radius: 3px;\r\n    margin: 0 1px;\r\n    transition: all 0.15s ease;\r\n}\r\n\r\n.navbar-dark .navbar-nav .nav-link:hover {\r\n    color: #ffffff !important;\r\n    background-color: rgba(255,255,255,0.08);\r\n}\r\n\r\n.navbar-dark .navbar-nav .nav-link.active {\r\n    color: #ffffff !important;\r\n    background-color: rgba(255,255,255,0.12);\r\n}\r\n\r\n/* Dropdown Menus - Very Subtle */\r\n.dropdown-menu {\r\n    border: 1px solid var(--border-color);\r\n    border-radius: 4px;\r\n    box-shadow: 0 1px 3px rgba(0,0,0,0.08);\r\n    font-size: 0.875rem;\r\n    background-color: var(--lighter-bg);\r\n}\r\n\r\n.dropdown-item {\r\n    padding: 0.5rem 1rem;\r\n    color: var(--text-dark);\r\n    transition: background-color 0.1s ease;\r\n}\r\n\r\n.dropdown-item:hover {\r\n    background-color: #f8f9fa;\r\n    color: var(--text-dark);\r\n}\r\n\r\n.dropdown-header {\r\n    color: var(--text-muted);\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n}\r\n\r\n/* Badge Styling - Very Conservative */\r\n.badge {\r\n    font-size: 0.6em;\r\n    font-weight: 400;\r\n    padding: 0.25em 0.4em;\r\n}\r\n\r\n.badge.bg-danger {\r\n    background-color: var(--danger-color) !important;\r\n}\r\n\r\n.badge.bg-warning {\r\n    background-color: var(--warning-color) !important;\r\n    color: #ffffff !important;\r\n}\r\n\r\n/* Cards - Clean and Minimal */\r\n.card {\r\n    border: 1px solid var(--border-color);\r\n    border-radius: 4px;\r\n    box-shadow: 0 1px 2px rgba(0,0,0,0.05);\r\n    transition: box-shadow 0.15s ease;\r\n    background-color: var(--lighter-bg);\r\n}\r\n\r\n.card:hover {\r\n    box-shadow: 0 2px 4px rgba(0,0,0,0.08);\r\n}\r\n\r\n.card-header {\r\n    background-color: #f8f9fa;\r\n    border-bottom: 1px solid var(--border-color);\r\n    font-weight: 500;\r\n    color: var(--text-dark);\r\n    padding: 0.75rem 1rem;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.card-title {\r\n    margin-bottom: 0.5rem;\r\n    color: var(--text-dark);\r\n    font-weight: 500;\r\n    font-size: 1rem;\r\n}\r\n\r\n/* Buttons - Very Professional and Muted */\r\n.btn {\r\n    border-radius: 3px;\r\n    font-weight: 400;\r\n    font-size: 0.875rem;\r\n    padding: 0.5rem 1rem;\r\n    transition: all 0.15s ease;\r\n    border-width: 1px;\r\n}\r\n\r\n.btn-primary {\r\n    background-color: var(--primary-color);\r\n    border-color: var(--primary-color);\r\n    color: #ffffff;\r\n}\r\n\r\n.btn-primary:hover {\r\n    background-color: #343a40;\r\n    border-color: #343a40;\r\n    transform: none;\r\n}\r\n\r\n.btn-secondary {\r\n    background-color: var(--secondary-color);\r\n    border-color: var(--secondary-color);\r\n    color: #ffffff;\r\n}\r\n\r\n.btn-success {\r\n    background-color: var(--success-color);\r\n    border-color: var(--success-color);\r\n}\r\n\r\n.btn-info {\r\n    background-color: var(--info-color);\r\n    border-color: var(--info-color);\r\n}\r\n\r\n.btn-warning {\r\n    background-color: var(--warning-color);\r\n    border-color: var(--warning-color);\r\n    color: #ffffff;\r\n}\r\n\r\n.btn-danger {\r\n    background-color: var(--danger-color);\r\n    border-color: var(--danger-color);\r\n}\r\n\r\n.btn-outline-primary {\r\n    color: var(--primary-color);\r\n    border-color: var(--primary-color);\r\n}\r\n\r\n.btn-outline-primary:hover {\r\n    background-color: var(--primary-color);\r\n    border-color: var(--primary-color);\r\n}\r\n\r\n.btn-outline-secondary {\r\n    color: var(--secondary-color);\r\n    border-color: var(--secondary-color);\r\n}\r\n\r\n.btn-outline-secondary:hover {\r\n    background-color: var(--secondary-color);\r\n    border-color: var(--secondary-color);\r\n}\r\n\r\n/* Statistics Cards - Very Muted Colors */\r\n.stats-card {\r\n    border-radius: 4px;\r\n    padding: 1.25rem;\r\n    text-align: center;\r\n    color: #ffffff;\r\n    border: none;\r\n}\r\n\r\n.stats-card.bg-primary {\r\n    background: linear-gradient(135deg, #495057 0%, #343a40 100%);\r\n}\r\n\r\n.stats-card.bg-success {\r\n    background: linear-gradient(135deg, #51a351 0%, #449d44 100%);\r\n}\r\n\r\n.stats-card.bg-info {\r\n    background: linear-gradient(135deg, #5bc0de 0%, #46b8da 100%);\r\n}\r\n\r\n.stats-card.bg-warning {\r\n    background: linear-gradient(135deg, #f0ad4e 0%, #eea236 100%);\r\n}\r\n\r\n.stats-card.bg-secondary {\r\n    background: linear-gradient(135deg, #868e96 0%, #6c757d 100%);\r\n}\r\n\r\n.stats-number {\r\n    font-size: 1.75rem;\r\n    font-weight: 600;\r\n    margin-bottom: 0.25rem;\r\n}\r\n\r\n.stats-label {\r\n    font-size: 0.8rem;\r\n    opacity: 0.9;\r\n    font-weight: 400;\r\n}\r\n\r\n/* Photo Grid - Very Clean Layout */\r\n.photo-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n    gap: 0.875rem;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.photo-item {\r\n    position: relative;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    border: 1px solid var(--border-color);\r\n    transition: transform 0.1s ease, box-shadow 0.1s ease;\r\n    background-color: var(--lighter-bg);\r\n}\r\n\r\n.photo-item:hover {\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.photo-item img {\r\n    width: 100%;\r\n    height: 160px;\r\n    object-fit: cover;\r\n}\r\n\r\n.photo-overlay {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background: linear-gradient(transparent, rgba(73, 80, 87, 0.8));\r\n    color: #ffffff;\r\n    padding: 0.875rem;\r\n    opacity: 0;\r\n    transition: opacity 0.2s ease;\r\n}\r\n\r\n.photo-item:hover .photo-overlay {\r\n    opacity: 1;\r\n}\r\n\r\n/* Forms - Very Clean and Professional */\r\n.form-control {\r\n    border-radius: 3px;\r\n    border: 1px solid var(--border-color);\r\n    font-size: 0.875rem;\r\n    padding: 0.5rem 0.75rem;\r\n    transition: border-color 0.15s ease, box-shadow 0.15s ease;\r\n    background-color: var(--lighter-bg);\r\n}\r\n\r\n.form-control:focus {\r\n    border-color: var(--primary-color);\r\n    box-shadow: 0 0 0 0.15rem rgba(73, 80, 87, 0.1);\r\n}\r\n\r\n.form-label {\r\n    font-weight: 500;\r\n    color: var(--text-dark);\r\n    margin-bottom: 0.375rem;\r\n    font-size: 0.875rem;\r\n}\r\n\r\n/* Alerts - Very Subtle and Professional */\r\n.alert {\r\n    border: 1px solid;\r\n    border-radius: 3px;\r\n    font-size: 0.875rem;\r\n    font-weight: 400;\r\n    padding: 0.75rem 1rem;\r\n}\r\n\r\n.alert-success {\r\n    background-color: #f4f8f4;\r\n    color: #2d5a2d;\r\n    border-color: #c3e6c3;\r\n}\r\n\r\n.alert-danger {\r\n    background-color: #fdf2f2;\r\n    color: #842029;\r\n    border-color: #f5c2c7;\r\n}\r\n\r\n.alert-warning {\r\n    background-color: #fefbf0;\r\n    color: #664d03;\r\n    border-color: #ffeaa7;\r\n}\r\n\r\n.alert-info {\r\n    background-color: #f0f9ff;\r\n    color: #055160;\r\n    border-color: #b8daff;\r\n}\r\n\r\n/* Footer - Very Subtle */\r\nfooter {\r\n    background-color: var(--primary-color);\r\n    color: #ffffff;\r\n    border-top: 1px solid #dee2e6;\r\n}\r\n\r\nfooter .text-muted {\r\n    color: #ced4da !important;\r\n}\r\n\r\n/* Progress Bars - Conservative */\r\n.progress {\r\n    background-color: #e9ecef;\r\n    border-radius: 3px;\r\n    height: 0.625rem;\r\n}\r\n\r\n.progress-bar {\r\n    background-color: var(--primary-color);\r\n    transition: width 0.3s ease;\r\n}\r\n\r\n/* Upload Area - Very Clean */\r\n.upload-area {\r\n    border: 2px dashed #dee2e6;\r\n    border-radius: 4px;\r\n    padding: 2rem;\r\n    text-align: center;\r\n    background-color: var(--lighter-bg);\r\n    transition: border-color 0.2s ease, background-color 0.2s ease;\r\n    color: var(--text-muted);\r\n}\r\n\r\n.upload-area:hover {\r\n    border-color: var(--primary-color);\r\n    background-color: #f8f9fa;\r\n}\r\n\r\n.upload-area.dragover {\r\n    border-color: var(--primary-color);\r\n    background-color: #f1f3f4;\r\n}\r\n\r\n/* Hero Sections - Very Subtle */\r\n.hero-section {\r\n    background: linear-gradient(135deg, #fafbfc 0%, #f1f3f4 100%);\r\n    border-radius: 4px;\r\n    border: 1px solid var(--border-color);\r\n}\r\n\r\n/* Feature Icons - Muted */\r\n.feature-icon {\r\n    width: 50px;\r\n    height: 50px;\r\n    font-size: 1.25rem;\r\n}\r\n\r\n.feature-icon.bg-primary {\r\n    background: var(--primary-color) !important;\r\n}\r\n\r\n.feature-icon.bg-success {\r\n    background: var(--success-color) !important;\r\n}\r\n\r\n.feature-icon.bg-info {\r\n    background: var(--info-color) !important;\r\n}\r\n\r\n/* CTA Sections */\r\n.cta-section {\r\n    background-color: #f8f9fa;\r\n    border-radius: 4px;\r\n    border: 1px solid var(--border-color);\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n    body {\r\n        font-size: 13px;\r\n    }\r\n    \r\n    .brand-name {\r\n        font-size: 1.1rem;\r\n    }\r\n    \r\n    .company-name {\r\n        font-size: 0.65rem;\r\n    }\r\n    \r\n    .navbar-brand img {\r\n        height: 32px !important;\r\n    }\r\n    \r\n    .photo-grid {\r\n        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n        gap: 0.625rem;\r\n    }\r\n    \r\n    .photo-item img {\r\n        height: 120px;\r\n    }\r\n    \r\n    .upload-area {\r\n        padding: 1.5rem 1rem;\r\n    }\r\n    \r\n    .hero-section {\r\n        padding: 1.5rem 1rem !important;\r\n    }\r\n}\r\n\r\n/* Print Styles */\r\n@media print {\r\n    .navbar,\r\n    footer,\r\n    .btn,\r\n    .alert {\r\n        display: none !important;\r\n    }\r\n    \r\n    body {\r\n        font-size: 12px;\r\n        color: #000 !important;\r\n        background: #fff !important;\r\n    }\r\n}\r\n\r\n/* Accessibility */\r\n@media (prefers-reduced-motion: reduce) {\r\n    * {\r\n        animation-duration: 0.01ms !important;\r\n        animation-iteration-count: 1 !important;\r\n        transition-duration: 0.01ms !important;\r\n    }\r\n}\r\n\r\n/* Focus Indicators - Subtle */\r\n.btn:focus,\r\n.form-control:focus,\r\n.nav-link:focus {\r\n    outline: 2px solid var(--primary-color);\r\n    outline-offset: 1px;\r\n}\r\n\r\n/* Loading States */\r\n.loading {\r\n    opacity: 0.6;\r\n    pointer-events: none;\r\n}\r\n\r\n.spinner-border-sm {\r\n    width: 0.875rem;\r\n    height: 0.875rem;\r\n}\r\n\r\n/* Text Colors - Conservative */\r\n.text-primary { color: var(--primary-color) !important; }\r\n.text-secondary { color: var(--secondary-color) !important; }\r\n.text-success { color: var(--success-color) !important; }\r\n.text-info { color: var(--info-color) !important; }\r\n.text-warning { color: var(--warning-color) !important; }\r\n.text-danger { color: var(--danger-color) !important; }\r\n.text-muted { color: var(--text-muted) !important; }/* Fix for Statistics Page Visibility Issues */\r\n\r\n/* Ensure statistics cards have proper contrast */\r\n.card.bg-gradient h3,\r\n.card.bg-gradient h4,\r\n.card.bg-gradient h5,\r\n.card.bg-gradient p,\r\n.card.bg-gradient small {\r\n    color: #ffffff !important;\r\n}\r\n\r\n/* Fix specific background colors */\r\n.bg-primary, .bg-primary * {\r\n    color: #ffffff !important;\r\n}\r\n\r\n.bg-success, .bg-success * {\r\n    color: #ffffff !important;\r\n}\r\n\r\n.bg-info, .bg-info * {\r\n    color: #ffffff !important;\r\n}\r\n\r\n.bg-warning, .bg-warning * {\r\n    color: #212529 !important;\r\n}\r\n\r\n.bg-danger, .bg-danger * {\r\n    color: #ffffff !important;\r\n}\r\n\r\n.bg-secondary, .bg-secondary * {\r\n    color: #ffffff !important;\r\n}\r\n\r\n/* Ensure card text is always visible */\r\n.card {\r\n    background-color: #ffffff !important;\r\n    color: #495057 !important;\r\n}\r\n\r\n.card-body {\r\n    color: inherit !important;\r\n}\r\n\r\n/* Statistics cards specific fixes */\r\n.stats-card h3,\r\n.stats-card h4 {\r\n    font-weight: 600 !important;\r\n    margin-bottom: 0.25rem !important;\r\n}\r\n\r\n.stats-card p,\r\n.stats-card small {\r\n    opacity: 0.9;\r\n    margin-bottom: 0 !important;\r\n}\r\n\r\n","size_bytes":13224},"static/css/upload.css":{"content":"<<<<<<< HEAD\r\n/*\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nUpload Interface Styles\r\n*/\r\n\r\n/* Upload Area Styling */\r\n.upload-area {\r\n    position: relative;\r\n    border: 2px dashed #dee2e6;\r\n    border-radius: 8px;\r\n    padding: 2rem;\r\n    text-align: center;\r\n    background: linear-gradient(135deg, #fafbfc 0%, #f8f9fa 100%);\r\n    transition: all 0.3s ease;\r\n    cursor: pointer;\r\n    min-height: 200px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.upload-area:hover {\r\n    border-color: var(--primary-color);\r\n    background: linear-gradient(135deg, #e9ecef 0%, #f1f3f4 100%);\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n}\r\n\r\n.upload-area.dragover {\r\n    border-color: #007bff;\r\n    background: linear-gradient(135deg, #e7f3ff 0%, #cce7ff 100%);\r\n    transform: scale(1.02);\r\n    box-shadow: 0 8px 25px rgba(0,123,255,0.2);\r\n}\r\n\r\n.upload-area input[type=\"file\"] {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    opacity: 0;\r\n    cursor: pointer;\r\n    z-index: 2;\r\n}\r\n\r\n#uploadStatus {\r\n    pointer-events: none;\r\n    z-index: 1;\r\n}\r\n\r\n/* Camera Interface */\r\n.camera-section {\r\n    background-color: #f8f9fa;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n}\r\n\r\n.camera-preview {\r\n    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\r\n    border: 2px solid #dee2e6;\r\n    border-radius: 8px;\r\n    min-height: 250px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n\r\n.camera-preview.camera-active {\r\n    border-color: #28a745;\r\n    background: #000;\r\n}\r\n\r\n.camera-preview video {\r\n    max-width: 100%;\r\n    max-height: 300px;\r\n    border-radius: 6px;\r\n    object-fit: cover;\r\n}\r\n\r\n.camera-placeholder {\r\n    text-align: center;\r\n    color: #6c757d;\r\n    padding: 2rem;\r\n}\r\n\r\n.camera-placeholder i {\r\n    opacity: 0.5;\r\n}\r\n\r\n/* Camera Controls */\r\n.camera-controls {\r\n    display: flex;\r\n    gap: 1rem;\r\n    align-items: end;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.camera-controls .form-select {\r\n    flex: 1;\r\n    min-width: 200px;\r\n}\r\n\r\n.camera-controls .btn {\r\n    white-space: nowrap;\r\n}\r\n\r\n/* Capture Overlay */\r\n.capture-overlay {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background: linear-gradient(transparent, rgba(0,0,0,0.7));\r\n    padding: 1rem;\r\n    display: none;\r\n    z-index: 10;\r\n}\r\n\r\n.capture-overlay.active {\r\n    display: block;\r\n}\r\n\r\n/* Capture Button */\r\n#captureBtn {\r\n    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);\r\n    border: none;\r\n    border-radius: 50px;\r\n    width: 60px;\r\n    height: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 1.5rem;\r\n    transition: all 0.3s ease;\r\n    margin: 0 auto;\r\n    box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);\r\n}\r\n\r\n#captureBtn:hover {\r\n    transform: scale(1.1);\r\n    box-shadow: 0 6px 20px rgba(220, 53, 69, 0.4);\r\n}\r\n\r\n#captureBtn:active {\r\n    transform: scale(0.95);\r\n}\r\n\r\n/* File Preview Items */\r\n.file-preview-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\r\n    gap: 1rem;\r\n    margin-top: 1rem;\r\n    padding: 1rem;\r\n    background-color: #f8f9fa;\r\n    border-radius: 6px;\r\n}\r\n\r\n.file-preview-item {\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 6px;\r\n    overflow: hidden;\r\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n    transition: transform 0.2s ease;\r\n}\r\n\r\n.file-preview-item:hover {\r\n    transform: translateY(-2px);\r\n}\r\n\r\n.file-preview-item.camera-captured {\r\n    border: 2px solid #28a745;\r\n}\r\n\r\n.file-preview-img {\r\n    width: 100%;\r\n    height: 80px;\r\n    object-fit: cover;\r\n}\r\n\r\n.file-preview-name {\r\n    padding: 0.5rem;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n    text-align: center;\r\n    background-color: #f8f9fa;\r\n}\r\n\r\n.file-preview-size {\r\n    padding: 0 0.5rem 0.5rem;\r\n    font-size: 0.65rem;\r\n    color: #6c757d;\r\n    text-align: center;\r\n}\r\n\r\n.remove-file-btn {\r\n    position: absolute;\r\n    top: 4px;\r\n    right: 4px;\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 50%;\r\n    border: none;\r\n    background: rgba(220, 53, 69, 0.9);\r\n    color: white;\r\n    font-size: 0.75rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n}\r\n\r\n.remove-file-btn:hover {\r\n    background: #dc3545;\r\n    transform: scale(1.1);\r\n}\r\n\r\n/* Progress Indicators */\r\n.upload-progress {\r\n    margin-top: 1rem;\r\n    padding: 1rem;\r\n    border-radius: 6px;\r\n    background-color: #e7f3ff;\r\n    border-left: 4px solid #007bff;\r\n}\r\n\r\n.progress-bar-custom {\r\n    height: 8px;\r\n    border-radius: 4px;\r\n    background-color: #e9ecef;\r\n    overflow: hidden;\r\n    margin-bottom: 0.5rem;\r\n}\r\n\r\n.progress-fill {\r\n    height: 100%;\r\n    background: linear-gradient(90deg, #007bff, #0056b3);\r\n    transition: width 0.3s ease;\r\n}\r\n\r\n/* Button States */\r\n.btn-loading {\r\n    position: relative;\r\n    pointer-events: none;\r\n}\r\n\r\n.btn-loading::after {\r\n    content: '';\r\n    position: absolute;\r\n    width: 16px;\r\n    height: 16px;\r\n    margin: auto;\r\n    border: 2px solid transparent;\r\n    border-top-color: currentColor;\r\n    border-radius: 50%;\r\n    animation: button-loading-spinner 1s ease infinite;\r\n}\r\n\r\n@keyframes button-loading-spinner {\r\n    from { transform: rotate(0turn); }\r\n    to { transform: rotate(1turn); }\r\n}\r\n\r\n/* Success States */\r\n.upload-success {\r\n    background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);\r\n    border-color: #28a745;\r\n    color: #155724;\r\n}\r\n\r\n.upload-error {\r\n    background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);\r\n    border-color: #dc3545;\r\n    color: #721c24;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n    .upload-area {\r\n        padding: 1.5rem 1rem;\r\n        min-height: 150px;\r\n    }\r\n    \r\n    .camera-preview {\r\n        min-height: 200px;\r\n    }\r\n    \r\n    .camera-controls {\r\n        flex-direction: column;\r\n    }\r\n    \r\n    .camera-controls .form-select {\r\n        min-width: unset;\r\n    }\r\n    \r\n    .file-preview-container {\r\n        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\r\n        gap: 0.5rem;\r\n        padding: 0.5rem;\r\n    }\r\n    \r\n    #captureBtn {\r\n        width: 50px;\r\n        height: 50px;\r\n        font-size: 1.2rem;\r\n    }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n    .upload-area {\r\n        padding: 1rem 0.5rem;\r\n    }\r\n    \r\n    .camera-preview {\r\n        min-height: 180px;\r\n    }\r\n    \r\n    .file-preview-container {\r\n        grid-template-columns: repeat(3, 1fr);\r\n    }\r\n}\r\n\r\n/* Accessibility */\r\n.visually-hidden {\r\n    position: absolute !important;\r\n    width: 1px !important;\r\n    height: 1px !important;\r\n    padding: 0 !important;\r\n    margin: -1px !important;\r\n    overflow: hidden !important;\r\n    clip: rect(0, 0, 0, 0) !important;\r\n    white-space: nowrap !important;\r\n    border: 0 !important;\r\n}\r\n\r\n/* Focus indicators */\r\n.upload-area:focus-within {\r\n    outline: 2px solid #007bff;\r\n    outline-offset: 2px;\r\n}\r\n\r\nbutton:focus,\r\nselect:focus {\r\n    outline: 2px solid #007bff;\r\n    outline-offset: 2px;\r\n}\r\n\r\n/* Animation for file selection */\r\n@keyframes file-select-success {\r\n    0% { transform: scale(1); }\r\n    50% { transform: scale(1.05); }\r\n    100% { transform: scale(1); }\r\n}\r\n\r\n.upload-area.file-selected {\r\n    animation: file-select-success 0.5s ease;\r\n}\r\n\r\n/* Camera error states */\r\n.camera-error {\r\n    background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);\r\n    border-color: #dc3545;\r\n}\r\n\r\n.camera-error .camera-placeholder {\r\n    color: #721c24;\r\n}\r\n=======\r\n/**\r\n * PhotoVault Upload Handler - NO CSRF VERSION\r\n * Camera support + file upload without CSRF token\r\n */\r\n\r\nclass PhotoVaultUploader {\r\n    constructor() {\r\n        // DOM Elements - File Upload\r\n        this.fileInput = document.getElementById('fileInput');\r\n        this.uploadArea = document.getElementById('uploadArea');\r\n        this.selectPhotosBtn = document.getElementById('selectPhotosBtn');\r\n        this.uploadForm = document.getElementById('uploadForm');\r\n        this.selectedFilesArea = document.getElementById('selectedFilesArea');\r\n        this.filePreviewContainer = document.getElementById('filePreviewContainer');\r\n        this.uploadBtn = document.getElementById('uploadBtn');\r\n        this.clearFilesBtn = document.getElementById('clearFilesBtn');\r\n        this.uploadProgress = document.getElementById('uploadProgress');\r\n        this.progressBar = document.getElementById('progressBar');\r\n        this.progressText = document.getElementById('progressText');\r\n        this.uploadMessages = document.getElementById('uploadMessages');\r\n        this.fileCount = document.getElementById('fileCount');\r\n        \r\n        // DOM Elements - Camera\r\n        this.cameraSelect = document.getElementById('cameraSelect');\r\n        this.startCameraBtn = document.getElementById('startCameraBtn');\r\n        this.stopCameraBtn = document.getElementById('stopCameraBtn');\r\n        this.cameraPreviewArea = document.getElementById('cameraPreviewArea');\r\n        this.cameraPlaceholder = document.getElementById('cameraPlaceholder');\r\n        this.cameraVideo = document.getElementById('cameraVideo');\r\n        this.captureOverlay = document.getElementById('captureOverlay');\r\n        this.captureBtn = document.getElementById('captureBtn');\r\n        this.captureCanvas = document.getElementById('captureCanvas');\r\n        \r\n        // State Management\r\n        this.selectedFiles = [];\r\n        this.capturedPhotos = [];\r\n        this.isUploading = false;\r\n        this.dialogState = 'closed';\r\n        this.maxFileSize = 16 * 1024 * 1024; // 16MB\r\n        this.allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];\r\n        \r\n        // Camera State\r\n        this.availableCameras = [];\r\n        this.currentStream = null;\r\n        this.isCameraActive = false;\r\n        this.captureCount = 0;\r\n        \r\n        // Initialize only once\r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        console.log('PhotoVault Uploader: Initializing with camera support (NO CSRF)...');\r\n        \r\n        // Remove any existing event listeners first\r\n        this.removeAllEventListeners();\r\n        \r\n        // Bind events with prevention of multiple triggers\r\n        this.bindEvents();\r\n        \r\n        // Initialize camera enumeration\r\n        this.initializeCameraSupport();\r\n        \r\n        console.log('PhotoVault Uploader: Ready');\r\n    }\r\n    \r\n    removeAllEventListeners() {\r\n        // Clone elements to remove ALL event listeners\r\n        if (this.selectPhotosBtn) {\r\n            const newBtn = this.selectPhotosBtn.cloneNode(true);\r\n            this.selectPhotosBtn.parentNode.replaceChild(newBtn, this.selectPhotosBtn);\r\n            this.selectPhotosBtn = document.getElementById('selectPhotosBtn');\r\n        }\r\n    }\r\n    \r\n    bindEvents() {\r\n        // PRIMARY: Button click to open file dialog\r\n        this.selectPhotosBtn?.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this.openFileDialog('button_click');\r\n        });\r\n        \r\n        // SECONDARY: Upload area click (but not on button)\r\n        this.uploadArea?.addEventListener('click', (e) => {\r\n            if (!this.selectPhotosBtn?.contains(e.target)) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.openFileDialog('area_click');\r\n            }\r\n        });\r\n        \r\n        // File input change event\r\n        this.fileInput?.addEventListener('change', (e) => {\r\n            this.handleFileSelection(e);\r\n        });\r\n        \r\n        // Drag and Drop\r\n        this.setupDragAndDrop();\r\n        \r\n        // Form submission\r\n        this.uploadForm?.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.handleUpload();\r\n        });\r\n        \r\n        // Clear files button\r\n        this.clearFilesBtn?.addEventListener('click', () => {\r\n            this.clearSelection();\r\n        });\r\n        \r\n        // Camera Events\r\n        this.bindCameraEvents();\r\n    }\r\n    \r\n    bindCameraEvents() {\r\n        // Camera selection\r\n        this.cameraSelect?.addEventListener('change', (e) => {\r\n            this.selectedCameraId = e.target.value;\r\n        });\r\n        \r\n        // Start camera\r\n        this.startCameraBtn?.addEventListener('click', () => {\r\n            this.startCamera();\r\n        });\r\n        \r\n        // Stop camera\r\n        this.stopCameraBtn?.addEventListener('click', () => {\r\n            this.stopCamera();\r\n        });\r\n        \r\n        // Capture photo\r\n        this.captureBtn?.addEventListener('click', () => {\r\n            this.capturePhoto();\r\n        });\r\n        \r\n        // Tab switching\r\n        document.getElementById('camera-tab')?.addEventListener('shown.bs.tab', () => {\r\n            this.onCameraTabShown();\r\n        });\r\n        \r\n        document.getElementById('file-tab')?.addEventListener('shown.bs.tab', () => {\r\n            this.onFileTabShown();\r\n        });\r\n    }\r\n    \r\n    async initializeCameraSupport() {\r\n        try {\r\n            // Check if getUserMedia is supported\r\n            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n                console.log('Camera not supported in this browser');\r\n                this.disableCameraTab('Camera not supported in this browser');\r\n                return;\r\n            }\r\n            \r\n            // Enumerate cameras\r\n            await this.enumerateCameras();\r\n            \r\n        } catch (error) {\r\n            console.error('Error initializing camera support:', error);\r\n            this.disableCameraTab('Camera initialization failed');\r\n        }\r\n    }\r\n    \r\n    async enumerateCameras() {\r\n        try {\r\n            const devices = await navigator.mediaDevices.enumerateDevices();\r\n            this.availableCameras = devices.filter(device => device.kind === 'videoinput');\r\n            \r\n            console.log(`Found ${this.availableCameras.length} cameras`);\r\n            \r\n            if (this.availableCameras.length === 0) {\r\n                this.disableCameraTab('No cameras found');\r\n                return;\r\n            }\r\n            \r\n            // Populate camera select dropdown\r\n            this.populateCameraSelect();\r\n            \r\n        } catch (error) {\r\n            console.error('Error enumerating cameras:', error);\r\n            this.disableCameraTab('Unable to access cameras');\r\n        }\r\n    }\r\n    \r\n    populateCameraSelect() {\r\n        if (!this.cameraSelect) return;\r\n        \r\n        this.cameraSelect.innerHTML = '<option value=\"\">Select Camera...</option>';\r\n        \r\n        this.availableCameras.forEach((camera, index) => {\r\n            const option = document.createElement('option');\r\n            option.value = camera.deviceId;\r\n            option.textContent = camera.label || `Camera ${index + 1}`;\r\n            this.cameraSelect.appendChild(option);\r\n        });\r\n        \r\n        // Auto-select first camera\r\n        if (this.availableCameras.length > 0) {\r\n            this.cameraSelect.value = this.availableCameras[0].deviceId;\r\n            this.selectedCameraId = this.availableCameras[0].deviceId;\r\n        }\r\n    }\r\n    \r\n    disableCameraTab(message) {\r\n        const cameraTab = document.getElementById('camera-tab');\r\n        if (cameraTab) {\r\n            cameraTab.disabled = true;\r\n            cameraTab.classList.add('disabled');\r\n            cameraTab.title = message;\r\n        }\r\n    }\r\n    \r\n    async startCamera() {\r\n        try {\r\n            if (!this.selectedCameraId) {\r\n                this.showMessage('Please select a camera first', 'warning');\r\n                return;\r\n            }\r\n            \r\n            // Stop existing stream\r\n            await this.stopCamera();\r\n            \r\n            // Configure camera constraints\r\n            const constraints = {\r\n                video: {\r\n                    deviceId: { exact: this.selectedCameraId },\r\n                    width: { ideal: 1920, max: 1920 },\r\n                    height: { ideal: 1080, max: 1080 },\r\n                    facingMode: 'user' // Prefer front camera on mobile\r\n                },\r\n                audio: false\r\n            };\r\n            \r\n            console.log('Starting camera with constraints:', constraints);\r\n            \r\n            // Get camera stream\r\n            this.currentStream = await navigator.mediaDevices.getUserMedia(constraints);\r\n            \r\n            // Set up video element\r\n            this.cameraVideo.srcObject = this.currentStream;\r\n            this.cameraVideo.style.display = 'block';\r\n            this.cameraPlaceholder.style.display = 'none';\r\n            this.captureOverlay.style.display = 'block';\r\n            \r\n            // Update UI\r\n            this.startCameraBtn.style.display = 'none';\r\n            this.stopCameraBtn.style.display = 'inline-block';\r\n            this.cameraPreviewArea.classList.add('camera-active');\r\n            \r\n            this.isCameraActive = true;\r\n            this.showMessage('Camera started successfully!', 'success');\r\n            \r\n        } catch (error) {\r\n            console.error('Error starting camera:', error);\r\n            this.handleCameraError(error);\r\n        }\r\n    }\r\n    \r\n    async stopCamera() {\r\n        try {\r\n            if (this.currentStream) {\r\n                this.currentStream.getTracks().forEach(track => {\r\n                    track.stop();\r\n                });\r\n                this.currentStream = null;\r\n            }\r\n            \r\n            // Reset UI\r\n            this.cameraVideo.style.display = 'none';\r\n            this.cameraPlaceholder.style.display = 'flex';\r\n            this.captureOverlay.style.display = 'none';\r\n            this.startCameraBtn.style.display = 'inline-block';\r\n            this.stopCameraBtn.style.display = 'none';\r\n            this.cameraPreviewArea.classList.remove('camera-active');\r\n            \r\n            this.isCameraActive = false;\r\n            console.log('Camera stopped');\r\n            \r\n        } catch (error) {\r\n            console.error('Error stopping camera:', error);\r\n        }\r\n    }\r\n    \r\n    handleCameraError(error) {\r\n        let message = 'Camera access failed';\r\n        \r\n        if (error.name === 'NotAllowedError') {\r\n            message = 'Camera permission denied. Please allow camera access and try again.';\r\n        } else if (error.name === 'NotFoundError') {\r\n            message = 'Camera not found. Please check your camera connection.';\r\n        } else if (error.name === 'NotReadableError') {\r\n            message = 'Camera is already in use by another application.';\r\n        } else if (error.name === 'OverconstrainedError') {\r\n            message = 'Camera constraints not supported. Trying with default settings...';\r\n            // Retry with basic constraints\r\n            this.retryWithBasicConstraints();\r\n            return;\r\n        }\r\n        \r\n        this.showMessage(message, 'error');\r\n        this.cameraPreviewArea.classList.add('camera-error');\r\n        \r\n        // Show permission denied UI if needed\r\n        if (error.name === 'NotAllowedError') {\r\n            this.showCameraPermissionDenied();\r\n        }\r\n    }\r\n    \r\n    async retryWithBasicConstraints() {\r\n        try {\r\n            const basicConstraints = {\r\n                video: { deviceId: { exact: this.selectedCameraId } },\r\n                audio: false\r\n            };\r\n            \r\n            this.currentStream = await navigator.mediaDevices.getUserMedia(basicConstraints);\r\n            this.cameraVideo.srcObject = this.currentStream;\r\n            this.cameraVideo.style.display = 'block';\r\n            this.cameraPlaceholder.style.display = 'none';\r\n            this.captureOverlay.style.display = 'block';\r\n            \r\n            this.isCameraActive = true;\r\n            this.showMessage('Camera started with basic settings', 'success');\r\n            \r\n        } catch (retryError) {\r\n            console.error('Retry with basic constraints failed:', retryError);\r\n            this.handleCameraError(retryError);\r\n        }\r\n    }\r\n    \r\n    showCameraPermissionDenied() {\r\n        this.cameraPlaceholder.innerHTML = `\r\n            <div class=\"camera-permission-denied\">\r\n                <i class=\"fas fa-camera-slash\"></i>\r\n                <h5>Camera Permission Required</h5>\r\n                <p>Please allow camera access in your browser settings and refresh the page.</p>\r\n                <small class=\"text-muted\">\r\n                    Look for the camera icon in your browser's address bar\r\n                </small>\r\n            </div>\r\n        `;\r\n    }\r\n    \r\n    capturePhoto() {\r\n        if (!this.isCameraActive || !this.currentStream) {\r\n            this.showMessage('Camera is not active', 'error');\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            // Set up canvas\r\n            const canvas = this.captureCanvas;\r\n            const context = canvas.getContext('2d');\r\n            const video = this.cameraVideo;\r\n            \r\n            // Set canvas dimensions to video dimensions\r\n            canvas.width = video.videoWidth;\r\n            canvas.height = video.videoHeight;\r\n            \r\n            // Draw current video frame to canvas\r\n            context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            \r\n            // Convert canvas to blob\r\n            canvas.toBlob((blob) => {\r\n                if (blob) {\r\n                    this.processCapturedPhoto(blob);\r\n                } else {\r\n                    this.showMessage('Failed to capture photo', 'error');\r\n                }\r\n            }, 'image/jpeg', 0.9);\r\n            \r\n        } catch (error) {\r\n            console.error('Error capturing photo:', error);\r\n            this.showMessage('Failed to capture photo', 'error');\r\n        }\r\n    }\r\n    \r\n    processCapturedPhoto(blob) {\r\n        // Create a file object from the blob\r\n        this.captureCount++;\r\n        const fileName = `camera-capture-${Date.now()}-${this.captureCount}.jpg`;\r\n        const file = new File([blob], fileName, { type: 'image/jpeg' });\r\n        \r\n        console.log(`Photo captured: ${fileName}, size: ${this.formatFileSize(file.size)}`);\r\n        \r\n        // Add to captured photos array\r\n        this.capturedPhotos.push(file);\r\n        \r\n        // Add to selected files for upload\r\n        this.selectedFiles.push(file);\r\n        \r\n        // Update UI\r\n        this.displayFilePreview();\r\n        this.updateFileCount();\r\n        this.selectedFilesArea.style.display = 'block';\r\n        \r\n        this.showMessage(`Photo captured! ${fileName}`, 'success');\r\n        \r\n        // Brief visual feedback\r\n        this.captureBtn.style.transform = 'scale(0.9)';\r\n        setTimeout(() => {\r\n            this.captureBtn.style.transform = '';\r\n        }, 150);\r\n    }\r\n    \r\n    onCameraTabShown() {\r\n        // Refresh camera enumeration when tab is shown\r\n        this.enumerateCameras();\r\n    }\r\n    \r\n    onFileTabShown() {\r\n        // Stop camera when switching to file tab\r\n        if (this.isCameraActive) {\r\n            this.stopCamera();\r\n        }\r\n    }\r\n    \r\n    // ===== FILE UPLOAD METHODS =====\r\n    \r\n    openFileDialog(source) {\r\n        // CRITICAL: Prevent multiple dialogs\r\n        if (this.dialogState === 'opening' || this.dialogState === 'open') {\r\n            console.log(`PhotoVault: Dialog already ${this.dialogState}, ignoring ${source}`);\r\n            return;\r\n        }\r\n        \r\n        if (this.isUploading) {\r\n            console.log('PhotoVault: Upload in progress, ignoring dialog request');\r\n            return;\r\n        }\r\n        \r\n        console.log(`PhotoVault: Opening file dialog from ${source}`);\r\n        \r\n        // Set state to prevent multiple opens\r\n        this.dialogState = 'opening';\r\n        this.fileInput.dataset.dialogState = 'opening';\r\n        \r\n        // Reset state after dialog interaction\r\n        const resetDialogState = () => {\r\n            setTimeout(() => {\r\n                this.dialogState = 'closed';\r\n                this.fileInput.dataset.dialogState = 'closed';\r\n            }, 500);\r\n        };\r\n        \r\n        // Listen for focus return (dialog closed)\r\n        const focusHandler = () => {\r\n            resetDialogState();\r\n            window.removeEventListener('focus', focusHandler);\r\n        };\r\n        window.addEventListener('focus', focusHandler);\r\n        \r\n        // Also reset after a timeout as backup\r\n        setTimeout(resetDialogState, 2000);\r\n        \r\n        // Trigger file input\r\n        this.fileInput.click();\r\n        this.dialogState = 'open';\r\n    }\r\n    \r\n    handleFileSelection(e) {\r\n        const files = Array.from(e.target.files || []);\r\n        console.log(`PhotoVault: ${files.length} files selected`);\r\n        \r\n        if (files.length === 0) {\r\n            return;\r\n        }\r\n        \r\n        // Validate files\r\n        const validFiles = this.validateFiles(files);\r\n        \r\n        if (validFiles.length === 0) {\r\n            this.showMessage('No valid image files selected', 'warning');\r\n            return;\r\n        }\r\n        \r\n        // Add to selected files (preserve existing captured photos)\r\n        this.selectedFiles = [...this.selectedFiles, ...validFiles];\r\n        \r\n        // Update UI\r\n        this.displayFilePreview();\r\n        this.updateFileCount();\r\n        this.selectedFilesArea.style.display = 'block';\r\n        \r\n        this.showMessage(`${validFiles.length} files added for upload`, 'success');\r\n    }\r\n    \r\n    validateFiles(files) {\r\n        const validFiles = [];\r\n        const errors = [];\r\n        \r\n        files.forEach(file => {\r\n            // Check file type\r\n            if (!this.allowedTypes.includes(file.type)) {\r\n                errors.push(`${file.name}: Invalid file type`);\r\n                return;\r\n            }\r\n            \r\n            // Check file size\r\n            if (file.size > this.maxFileSize) {\r\n                errors.push(`${file.name}: File too large (max 16MB)`);\r\n                return;\r\n            }\r\n            \r\n            validFiles.push(file);\r\n        });\r\n        \r\n        // Show validation errors\r\n        if (errors.length > 0) {\r\n            this.showMessage(`Some files were rejected:<br>${errors.join('<br>')}`, 'warning');\r\n        }\r\n        \r\n        return validFiles;\r\n    }\r\n    \r\n    displayFilePreview() {\r\n        this.filePreviewContainer.innerHTML = '';\r\n        \r\n        this.selectedFiles.forEach((file, index) => {\r\n            const previewItem = document.createElement('div');\r\n            previewItem.className = 'file-preview-item';\r\n            \r\n            // Mark camera-captured photos\r\n            if (this.capturedPhotos.includes(file)) {\r\n                previewItem.classList.add('camera-captured');\r\n            }\r\n            \r\n            // Create image preview\r\n            const img = document.createElement('img');\r\n            img.className = 'file-preview-img';\r\n            img.alt = file.name;\r\n            \r\n            // Create file reader for preview\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                img.src = e.target.result;\r\n            };\r\n            reader.readAsDataURL(file);\r\n            \r\n            // File info\r\n            const fileName = document.createElement('div');\r\n            fileName.className = 'file-preview-name';\r\n            fileName.textContent = file.name.length > 20 ? \r\n                file.name.substring(0, 17) + '...' : file.name;\r\n            \r\n            const fileSize = document.createElement('div');\r\n            fileSize.className = 'file-preview-size';\r\n            fileSize.textContent = this.formatFileSize(file.size);\r\n            \r\n            // Remove button\r\n            const removeBtn = document.createElement('button');\r\n            removeBtn.className = 'remove-file-btn';\r\n            removeBtn.innerHTML = '×';\r\n            removeBtn.title = 'Remove file';\r\n            removeBtn.onclick = (e) => {\r\n                e.stopPropagation();\r\n                this.removeFile(index);\r\n            };\r\n            \r\n            // Assemble preview item\r\n            previewItem.appendChild(img);\r\n            previewItem.appendChild(fileName);\r\n            previewItem.appendChild(fileSize);\r\n            previewItem.appendChild(removeBtn);\r\n            \r\n            this.filePreviewContainer.appendChild(previewItem);\r\n        });\r\n    }\r\n    \r\n    removeFile(index) {\r\n        const removedFile = this.selectedFiles[index];\r\n        \r\n        // Remove from captured photos array if it was captured\r\n        if (this.capturedPhotos.includes(removedFile)) {\r\n            const capturedIndex = this.capturedPhotos.indexOf(removedFile);\r\n            this.capturedPhotos.splice(capturedIndex, 1);\r\n        }\r\n        \r\n        // Remove from selected files\r\n        this.selectedFiles.splice(index, 1);\r\n        \r\n        if (this.selectedFiles.length === 0) {\r\n            this.clearSelection();\r\n        } else {\r\n            this.displayFilePreview();\r\n            this.updateFileCount();\r\n        }\r\n    }\r\n    \r\n    clearSelection() {\r\n        this.selectedFiles = [];\r\n        this.capturedPhotos = [];\r\n        this.fileInput.value = '';\r\n        this.selectedFilesArea.style.display = 'none';\r\n        this.filePreviewContainer.innerHTML = '';\r\n        this.hideProgress();\r\n        this.dialogState = 'closed';\r\n        this.captureCount = 0;\r\n    }\r\n    \r\n    updateFileCount() {\r\n        if (this.fileCount) {\r\n            this.fileCount.textContent = this.selectedFiles.length;\r\n        }\r\n    }\r\n    \r\n    setupDragAndDrop() {\r\n        if (!this.uploadArea) return;\r\n        \r\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\r\n            this.uploadArea.addEventListener(eventName, (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            });\r\n        });\r\n        \r\n        ['dragenter', 'dragover'].forEach(eventName => {\r\n            this.uploadArea.addEventListener(eventName, () => {\r\n                this.uploadArea.classList.add('dragover');\r\n            });\r\n        });\r\n        \r\n        ['dragleave', 'drop'].forEach(eventName => {\r\n            this.uploadArea.addEventListener(eventName, () => {\r\n                this.uploadArea.classList.remove('dragover');\r\n            });\r\n        });\r\n        \r\n        this.uploadArea.addEventListener('drop', (e) => {\r\n            const files = Array.from(e.dataTransfer.files);\r\n            if (files.length > 0) {\r\n                // Validate and add files\r\n                const validFiles = this.validateFiles(files);\r\n                \r\n                if (validFiles.length > 0) {\r\n                    // Add to existing selection\r\n                    this.selectedFiles = [...this.selectedFiles, ...validFiles];\r\n                    this.displayFilePreview();\r\n                    this.updateFileCount();\r\n                    this.selectedFilesArea.style.display = 'block';\r\n                    this.showMessage(`${validFiles.length} files added via drag and drop`, 'success');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    async handleUpload() {\r\n        if (this.selectedFiles.length === 0) {\r\n            this.showMessage('Please select files or capture photos to upload', 'warning');\r\n            return;\r\n        }\r\n        \r\n        if (this.isUploading) {\r\n            console.log('Upload already in progress');\r\n            return;\r\n        }\r\n        \r\n        // Stop camera if active during upload\r\n        if (this.isCameraActive) {\r\n            await this.stopCamera();\r\n        }\r\n        \r\n        this.isUploading = true;\r\n        this.showProgress();\r\n        this.uploadBtn.classList.add('loading');\r\n        this.uploadBtn.disabled = true;\r\n        \r\n        try {\r\n            // Create FormData\r\n            const formData = new FormData();\r\n            \r\n            // NO CSRF TOKEN - REMOVED FOR TESTING\r\n            console.log('📤 Uploading without CSRF token');\r\n            \r\n            // Add files (both uploaded and captured)\r\n            this.selectedFiles.forEach(file => {\r\n                formData.append('photos', file);\r\n            });\r\n            \r\n            // Upload with progress\r\n            const response = await this.uploadWithProgress(formData);\r\n            \r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                const totalUploaded = result.uploaded || this.selectedFiles.length;\r\n                const capturedCount = this.capturedPhotos.length;\r\n                \r\n                let message = `Successfully uploaded ${totalUploaded} photos!`;\r\n                if (capturedCount > 0) {\r\n                    message += ` (${capturedCount} captured from camera)`;\r\n                }\r\n                \r\n                this.showMessage(message, 'success');\r\n                this.clearSelection();\r\n                \r\n                // Refresh page to show new uploads\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 2000);\r\n            } else {\r\n                throw new Error(`Upload failed: ${response.status}`);\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('Upload error:', error);\r\n            this.showMessage(`Upload failed: ${error.message}`, 'error');\r\n        } finally {\r\n            this.isUploading = false;\r\n            this.hideProgress();\r\n            this.uploadBtn.classList.remove('loading');\r\n            this.uploadBtn.disabled = false;\r\n        }\r\n    }\r\n    \r\n    uploadWithProgress(formData) {\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            \r\n            // Progress handler\r\n            xhr.upload.addEventListener('progress', (e) => {\r\n                if (e.lengthComputable) {\r\n                    const percentComplete = (e.loaded / e.total) * 100;\r\n                    this.updateProgress(percentComplete, `Uploading ${Math.round(percentComplete)}%`);\r\n                }\r\n            });\r\n            \r\n            // Load handler\r\n            xhr.addEventListener('load', () => {\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve({\r\n                        ok: true,\r\n                        status: xhr.status,\r\n                        json: () => Promise.resolve(JSON.parse(xhr.responseText || '{}'))\r\n                    });\r\n                } else {\r\n                    reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));\r\n                }\r\n            });\r\n            \r\n            // Error handler\r\n            xhr.addEventListener('error', () => {\r\n                reject(new Error('Network error'));\r\n            });\r\n            \r\n            // Open and send\r\n            xhr.open('POST', this.uploadForm.action || '/photos/upload');\r\n            xhr.send(formData);\r\n        });\r\n    }\r\n    \r\n    showProgress() {\r\n        if (this.uploadProgress) {\r\n            this.uploadProgress.style.display = 'block';\r\n            this.updateProgress(0, 'Preparing upload...');\r\n        }\r\n    }\r\n    \r\n    hideProgress() {\r\n        if (this.uploadProgress) {\r\n            this.uploadProgress.style.display = 'none';\r\n        }\r\n    }\r\n    \r\n    updateProgress(percent, text) {\r\n        if (this.progressBar) {\r\n            this.progressBar.style.width = `${percent}%`;\r\n        }\r\n        if (this.progressText) {\r\n            this.progressText.textContent = text;\r\n        }\r\n    }\r\n    \r\n    showMessage(message, type = 'info') {\r\n        if (!this.uploadMessages) return;\r\n        \r\n        const alertClass = {\r\n            'success': 'alert-success',\r\n            'error': 'alert-danger',\r\n            'warning': 'alert-warning',\r\n            'info': 'alert-info'\r\n        }[type] || 'alert-info';\r\n        \r\n        this.uploadMessages.innerHTML = `\r\n            <div class=\"alert ${alertClass} alert-dismissible fade show\" role=\"alert\">\r\n                ${message}\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\r\n            </div>\r\n        `;\r\n        \r\n        // Auto-hide success messages\r\n        if (type === 'success') {\r\n            setTimeout(() => {\r\n                const alert = this.uploadMessages.querySelector('.alert');\r\n                if (alert) {\r\n                    alert.classList.remove('show');\r\n                }\r\n            }, 5000);\r\n        }\r\n    }\r\n    \r\n    formatFileSize(bytes) {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    }\r\n    \r\n    // Cleanup method\r\n    destroy() {\r\n        if (this.currentStream) {\r\n            this.stopCamera();\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize when DOM is ready\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log('PhotoVault: DOM loaded, initializing uploader (NO CSRF VERSION)...');\r\n    \r\n    // Ensure only one instance\r\n    if (window.photoVaultUploader) {\r\n        console.log('PhotoVault: Uploader already exists, skipping initialization');\r\n        return;\r\n    }\r\n    \r\n    window.photoVaultUploader = new PhotoVaultUploader();\r\n});\r\n\r\n// Cleanup on page unload\r\nwindow.addEventListener('beforeunload', () => {\r\n    if (window.photoVaultUploader) {\r\n        window.photoVaultUploader.destroy();\r\n    }\r\n});\r\n\r\n// Prevent multiple initializations\r\nwindow.addEventListener('load', () => {\r\n    if (!window.photoVaultUploader) {\r\n        console.log('PhotoVault: Fallback initialization');\r\n        window.photoVaultUploader = new PhotoVaultUploader();\r\n    }\r\n});\r\n>>>>>>> d7a78a54c0ad65f18ff94f6c70f442201aeb0f38\r\n","size_bytes":38136},"static/js/dashboard.js":{"content":"/*\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n*/\r\n\r\n// photovault/static/js/dashboard.js\r\n// Dashboard functionality\r\nlet stream = null;\r\n\r\nasync function uploadFiles(files) {\r\n    if (!files || files.length === 0) {\r\n        console.warn('No files provided to uploadFiles function.');\r\n        // Optionally, show a user-friendly message\r\n        const progressElement = document.getElementById('uploadProgress');\r\n        if (progressElement) {\r\n             progressElement.style.display = 'block';\r\n             progressElement.textContent = 'No files selected.';\r\n             progressElement.className = 'alert alert-warning';\r\n             setTimeout(() => { progressElement.style.display = 'none'; }, 3000);\r\n        }\r\n        return; // Exit early if no files\r\n    }\r\n\r\n    const formData = new FormData();\r\n\r\n    for (let file of files) {\r\n        formData.append('files[]', file);\r\n    }\r\n\r\n    const progressElement = document.getElementById('uploadProgress');\r\n    if (progressElement) {\r\n        progressElement.style.display = 'block';\r\n        progressElement.textContent = 'Uploading photos...';\r\n        progressElement.className = 'alert alert-info'; // Reset class\r\n    }\r\n\r\n    try {\r\n        const response = await fetch('/api/upload', {\r\n            method: 'POST',\r\n            body: formData,\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n            console.log('Upload successful:', data.files);\r\n            // Provide feedback before reload\r\n            if (progressElement) {\r\n                 let successMessage = 'Upload successful!';\r\n                 if (data.message) {\r\n                     successMessage = data.message; // Use server message if provided\r\n                 }\r\n                 progressElement.className = 'alert alert-success';\r\n                 progressElement.textContent = successMessage;\r\n                 // Reload to show new photos after a short delay\r\n                 setTimeout(() => {\r\n                     location.reload();\r\n                 }, 1500);\r\n            } else {\r\n                 location.reload(); // Fallback reload\r\n            }\r\n        } else {\r\n            // Handle explicit failure from server\r\n            console.error('Upload failed:', data);\r\n            let errorMessage = 'Upload failed.';\r\n            if (data.message) {\r\n                errorMessage = data.message;\r\n            }\r\n            if (data.errors && data.errors.length > 0) {\r\n                errorMessage += ' Errors: ' + data.errors.join('; ');\r\n            }\r\n            if (progressElement) {\r\n                 progressElement.className = 'alert alert-danger';\r\n                 progressElement.textContent = errorMessage;\r\n                 // Keep error visible longer or until user interacts\r\n                 // setTimeout(() => { progressElement.style.display = 'none'; }, 5000);\r\n            } else {\r\n                 alert(errorMessage); // Fallback if no progress element\r\n            }\r\n            // Do not reload on failure\r\n        }\r\n    } catch (error) {\r\n        // Handle network errors or unexpected JS errors\r\n        console.error('Upload error:', error);\r\n        const errorMessage = 'Upload error: ' + (error.message || 'Network or unexpected error occurred.');\r\n        if (progressElement) {\r\n             progressElement.className = 'alert alert-danger';\r\n             progressElement.textContent = errorMessage;\r\n        } else {\r\n             alert(errorMessage); // Fallback\r\n        }\r\n        // Do not reload on error\r\n    } finally {\r\n        // Ensure progress is hidden if it was a simple success that triggered reload\r\n        // The timeout in the success block handles this.\r\n        // If hiding is needed for other cases, add logic here.\r\n    }\r\n}\r\n\r\nasync function deletePhoto(photoId) {\r\n    if (!confirm('Are you sure you want to delete this photo?')) {\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`/api/delete/${photoId}`, {\r\n            method: 'DELETE',\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok && data.success) {\r\n            // Remove the photo element from the DOM\r\n            const photoElement = document.getElementById(`photo-${photoId}`);\r\n            if (photoElement) {\r\n                photoElement.remove();\r\n                // Optional: Show a brief confirmation message\r\n                // e.g., using a toast or updating a status area\r\n            }\r\n        } else {\r\n            const errorMsg = data.error || data.message || 'Unknown error';\r\n            alert('Failed to delete photo: ' + errorMsg);\r\n        }\r\n    } catch (error) {\r\n        console.error('Delete error:', error);\r\n        alert('Delete error: ' + (error.message || 'Network error'));\r\n    }\r\n}\r\n\r\nasync function startCamera() {\r\n    const modalElement = document.getElementById('cameraModal');\r\n    if (!modalElement) {\r\n        console.warn('Camera modal not found - feature not available on this page');\r\n        return;\r\n    }\r\n    \r\n    if (typeof bootstrap === 'undefined') {\r\n        console.error('Bootstrap not loaded');\r\n        return;\r\n    }\r\n    \r\n    const modal = new bootstrap.Modal(modalElement);\r\n    const video = document.getElementById('video');\r\n\r\n    if (!video) {\r\n        alert('Video element not found.');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Stop any existing stream first\r\n        if (stream) {\r\n            stream.getTracks().forEach(track => track.stop());\r\n        }\r\n        stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        video.srcObject = stream;\r\n        modal.show();\r\n    } catch (error) {\r\n        console.error('Camera access error:', error);\r\n        alert('Could not access camera: ' + (error.message || 'Permission denied or device not found.'));\r\n    }\r\n}\r\n\r\nfunction capturePhoto() {\r\n    const video = document.getElementById('video');\r\n    const canvas = document.getElementById('canvas');\r\n    const modalElement = document.getElementById('cameraModal');\r\n\r\n    if (!video || !canvas || !modalElement) {\r\n         alert('Required elements for capture not found.');\r\n         return;\r\n    }\r\n\r\n    const context = canvas.getContext('2d');\r\n\r\n    // Set canvas dimensions to match video\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n\r\n    if (canvas.width === 0 || canvas.height === 0) {\r\n         alert('Could not determine video dimensions.');\r\n         return;\r\n    }\r\n\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    canvas.toBlob((blob) => {\r\n        if (!blob) {\r\n             alert('Failed to capture photo.');\r\n             return;\r\n        }\r\n        const file = new File([blob], 'captured_photo.jpg', { type: 'image/jpeg' });\r\n        uploadFiles([file]); // Upload the captured photo\r\n\r\n        // Close modal and stop stream\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        if (modal) {\r\n            modal.hide();\r\n        }\r\n        if (stream) {\r\n            stream.getTracks().forEach(track => track.stop());\r\n            stream = null; // Clear reference\r\n        }\r\n    }, 'image/jpeg');\r\n}\r\n\r\n// Optional: Add event listener for file input change if not handled inline\r\n// document.addEventListener('DOMContentLoaded', function() {\r\n//     const fileInput = document.getElementById('fileInput');\r\n//     if (fileInput) {\r\n//         fileInput.addEventListener('change', function(e) {\r\n//             if (e.target.files.length > 0) {\r\n//                 uploadFiles(e.target.files);\r\n//                 // Clear the input to allow selecting the same file again later\r\n//                 e.target.value = '';\r\n//             }\r\n//         });\r\n//     }\r\n// });\r\n","size_bytes":8102},"static/js/editor-enhanced.js":{"content":"/*\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n*/\r\n\r\n// Enhanced markup functions for PhotoVault editor\r\n\r\nfunction drawRectangle(x, y, width, height, fill = false) {\r\n    ctx.beginPath();\r\n    ctx.rect(x, y, width, height);\r\n    if (fill) {\r\n        ctx.fill();\r\n    } else {\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nfunction drawCircle(x, y, radius, fill = false) {\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n    if (fill) {\r\n        ctx.fill();\r\n    } else {\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nfunction drawArrow(fromX, fromY, toX, toY) {\r\n    const headLength = 15;\r\n    const angle = Math.atan2(toY - fromY, toX - fromX);\r\n    \r\n    // Draw line\r\n    ctx.beginPath();\r\n    ctx.moveTo(fromX, fromY);\r\n    ctx.lineTo(toX, toY);\r\n    ctx.stroke();\r\n    \r\n    // Draw arrowhead\r\n    ctx.beginPath();\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(toX - headLength * Math.cos(angle - Math.PI / 6), \r\n               toY - headLength * Math.sin(angle - Math.PI / 6));\r\n    ctx.moveTo(toX, toY);\r\n    ctx.lineTo(toX - headLength * Math.cos(angle + Math.PI / 6), \r\n               toY - headLength * Math.sin(angle + Math.PI / 6));\r\n    ctx.stroke();\r\n}\r\n\r\nfunction addText(x, y) {\r\n    const text = document.getElementById('textInput').value;\r\n    if (!text) return;\r\n    \r\n    const fontSize = document.getElementById('fontSize').value;\r\n    const color = document.getElementById('drawColor').value;\r\n    \r\n    ctx.font = `${fontSize}px Arial, sans-serif`;\r\n    ctx.fillStyle = color;\r\n    ctx.textBaseline = 'top';\r\n    \r\n    // Add text background for better visibility\r\n    const textMetrics = ctx.measureText(text);\r\n    const textHeight = parseInt(fontSize);\r\n    \r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n    ctx.fillRect(x - 2, y - 2, textMetrics.width + 4, textHeight + 4);\r\n    \r\n    ctx.fillStyle = color;\r\n    ctx.fillText(text, x, y);\r\n    \r\n    // Clear input after adding text\r\n    document.getElementById('textInput').value = '';\r\n}\r\n\r\nfunction updateLineWidth() {\r\n    const value = document.getElementById('lineWidth').value;\r\n    document.getElementById('lineWidthValue').textContent = value;\r\n}\r\n\r\nfunction updateFontSize() {\r\n    const value = document.getElementById('fontSize').value;\r\n    document.getElementById('fontSizeValue').textContent = value;\r\n}\r\n\r\nfunction updateDrawingStyle() {\r\n    // This function is called when color changes\r\n    // The actual color is applied in the draw function\r\n}\r\n\r\n// Add undo/redo functionality\r\nlet undoStack = [];\r\nlet redoStack = [];\r\nconst MAX_UNDO_STEPS = 20;\r\n\r\nfunction saveCanvasState() {\r\n    undoStack.push(canvas.toDataURL());\r\n    if (undoStack.length > MAX_UNDO_STEPS) {\r\n        undoStack.shift();\r\n    }\r\n    redoStack = []; // Clear redo stack when new action is performed\r\n}\r\n\r\nfunction undo() {\r\n    if (undoStack.length > 0) {\r\n        redoStack.push(canvas.toDataURL());\r\n        const previousState = undoStack.pop();\r\n        const img = new Image();\r\n        img.onload = function() {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.drawImage(img, 0, 0);\r\n        };\r\n        img.src = previousState;\r\n    }\r\n}\r\n\r\nfunction redo() {\r\n    if (redoStack.length > 0) {\r\n        undoStack.push(canvas.toDataURL());\r\n        const nextState = redoStack.pop();\r\n        const img = new Image();\r\n        img.onload = function() {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.drawImage(img, 0, 0);\r\n        };\r\n        img.src = nextState;\r\n    }\r\n}\r\n\r\n// Save canvas state before starting drawing\r\nfunction saveStateBeforeDrawing() {\r\n    if (currentTool !== 'move') {\r\n        saveCanvasState();\r\n    }\r\n}\r\n\r\n// Keyboard shortcuts\r\ndocument.addEventListener('keydown', function(e) {\r\n    if (e.ctrlKey || e.metaKey) {\r\n        switch(e.key) {\r\n            case 'z':\r\n                e.preventDefault();\r\n                if (e.shiftKey) {\r\n                    redo();\r\n                } else {\r\n                    undo();\r\n                }\r\n                break;\r\n            case 'y':\r\n                e.preventDefault();\r\n                redo();\r\n                break;\r\n        }\r\n    }\r\n});","size_bytes":4494},"static/js/editor.js":{"content":"/*\r\nPhotoVault - Professional Photo Management Platform\r\nCopyright (c) 2025 Calmic Sdn Bhd. All rights reserved.\r\n\r\nThis software is proprietary and confidential. Unauthorized copying, distribution,\r\nmodification, or use of this software is strictly prohibited.\r\n\r\nWebsite: https://www.calmic.com.my\r\nEmail: support@calmic.com.my\r\n\r\nCALMIC SDN BHD - \"Committed to Excellence\"\r\n*/\r\n\r\n// Photo Editor functionality\r\nlet currentTool = 'move';\r\nlet isDrawing = false;\r\nlet lastX = 0;\r\nlet lastY = 0;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet canvas, ctx, image;\r\nlet brightness = 0, contrast = 0, saturation = 0, rotation = 0;\r\nlet imageData = null;\r\n\r\nfunction initEditor() {\r\n    canvas = document.getElementById('canvas');\r\n    ctx = canvas.getContext('2d');\r\n    \r\n    const img = document.getElementById('sourceImage');\r\n    image = new Image();\r\n    image.onload = function() {\r\n        resizeCanvas();\r\n        applyFilters();\r\n    };\r\n    image.src = img.src;\r\n    \r\n    // Add event listeners\r\n    canvas.addEventListener('mousedown', startDrawing);\r\n    canvas.addEventListener('mousemove', draw);\r\n    canvas.addEventListener('mouseup', stopDrawing);\r\n    canvas.addEventListener('mouseout', stopDrawing);\r\n    \r\n    // Add touch support for mobile\r\n    canvas.addEventListener('touchstart', handleTouchStart);\r\n    canvas.addEventListener('touchmove', handleTouchMove);\r\n    canvas.addEventListener('touchend', handleTouchEnd);\r\n    \r\n    // Setup filter controls\r\n    document.getElementById('brightness').addEventListener('input', updateFilter);\r\n    document.getElementById('contrast').addEventListener('input', updateFilter);\r\n    document.getElementById('saturation').addEventListener('input', updateFilter);\r\n    document.getElementById('rotation').addEventListener('input', updateFilter);\r\n    \r\n    // Setup color and line width\r\n    document.getElementById('drawColor').addEventListener('input', updateDrawingStyle);\r\n    document.getElementById('lineWidth').addEventListener('input', updateLineWidth);\r\n    document.getElementById('fontSize').addEventListener('input', updateFontSize);\r\n    \r\n    // Initialize editor when page loads\r\n    document.addEventListener('DOMContentLoaded', initEditor);\r\n}\r\n\r\nfunction handleTouchStart(e) {\r\n    e.preventDefault();\r\n    const touch = e.touches[0];\r\n    const mouseEvent = new MouseEvent('mousedown', {\r\n        clientX: touch.clientX,\r\n        clientY: touch.clientY\r\n    });\r\n    canvas.dispatchEvent(mouseEvent);\r\n}\r\n\r\nfunction handleTouchMove(e) {\r\n    e.preventDefault();\r\n    const touch = e.touches[0];\r\n    const mouseEvent = new MouseEvent('mousemove', {\r\n        clientX: touch.clientX,\r\n        clientY: touch.clientY\r\n    });\r\n    canvas.dispatchEvent(mouseEvent);\r\n}\r\n\r\nfunction handleTouchEnd(e) {\r\n    e.preventDefault();\r\n    const mouseEvent = new MouseEvent('mouseup', {});\r\n    canvas.dispatchEvent(mouseEvent);\r\n}\r\n\r\nfunction setTool(tool) {\r\n    currentTool = tool;\r\n    // Update UI to show active tool\r\n    document.querySelectorAll('.btn-outline-primary').forEach(btn => {\r\n        btn.classList.remove('active', 'tool-active');\r\n    });\r\n    event.target.classList.add('active', 'tool-active');\r\n    \r\n    // Show/hide text input for text tool\r\n    const textInput = document.getElementById('textInput');\r\n    if (tool === 'text') {\r\n        textInput.style.display = 'block';\r\n        textInput.focus();\r\n    } else {\r\n        textInput.style.display = 'none';\r\n    }\r\n}\r\n\r\nfunction startDrawing(e) {\r\n    if (currentTool === 'move') return;\r\n    \r\n    isDrawing = true;\r\n    [lastX, lastY] = getMousePos(canvas, e);\r\n    [startX, startY] = [lastX, lastY];\r\n    \r\n    // Save canvas state for shape drawing\r\n    if (['rectangle', 'circle', 'arrow'].includes(currentTool)) {\r\n        imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n    }\r\n    \r\n    // Handle text tool\r\n    if (currentTool === 'text') {\r\n        addText(lastX, lastY);\r\n        isDrawing = false;\r\n        return;\r\n    }\r\n}\r\n\r\nfunction draw(e) {\r\n    if (!isDrawing) return;\r\n    \r\n    const [x, y] = getMousePos(canvas, e);\r\n    const color = document.getElementById('drawColor').value;\r\n    const lineWidth = parseInt(document.getElementById('lineWidth').value);\r\n    const fillShapes = document.getElementById('fillShapes').checked;\r\n    \r\n    // Restore canvas for shape tools\r\n    if (['rectangle', 'circle', 'arrow'].includes(currentTool)) {\r\n        ctx.putImageData(imageData, 0, 0);\r\n    }\r\n    \r\n    ctx.strokeStyle = color;\r\n    ctx.fillStyle = color;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n    \r\n    switch (currentTool) {\r\n        case 'pen':\r\n            ctx.beginPath();\r\n            ctx.moveTo(lastX, lastY);\r\n            ctx.lineTo(x, y);\r\n            ctx.stroke();\r\n            [lastX, lastY] = [x, y];\r\n            break;\r\n            \r\n        case 'highlight':\r\n            ctx.globalAlpha = 0.3;\r\n            ctx.lineWidth = lineWidth * 3;\r\n            ctx.beginPath();\r\n            ctx.moveTo(lastX, lastY);\r\n            ctx.lineTo(x, y);\r\n            ctx.stroke();\r\n            ctx.globalAlpha = 1.0;\r\n            [lastX, lastY] = [x, y];\r\n            break;\r\n            \r\n        case 'rectangle':\r\n            drawRectangle(startX, startY, x - startX, y - startY, fillShapes);\r\n            break;\r\n            \r\n        case 'circle':\r\n            drawCircle(startX, startY, Math.sqrt((x - startX) ** 2 + (y - startY) ** 2), fillShapes);\r\n            break;\r\n            \r\n        case 'arrow':\r\n            drawArrow(startX, startY, x, y);\r\n            break;\r\n    }\r\n}\r\n\r\nfunction stopDrawing() {\r\n    isDrawing = false;\r\n}\r\n\r\nfunction getMousePos(canvas, evt) {\r\n    const rect = canvas.getBoundingClientRect();\r\n    return [\r\n        (evt.clientX - rect.left) / (rect.right - rect.left) * canvas.width,\r\n        (evt.clientY - rect.top) / (rect.bottom - rect.top) * canvas.height\r\n    ];\r\n}\r\n\r\nfunction updateFilter() {\r\n    brightness = parseInt(document.getElementById('brightness').value);\r\n    contrast = parseInt(document.getElementById('contrast').value);\r\n    saturation = parseInt(document.getElementById('saturation').value);\r\n    rotation = parseInt(document.getElementById('rotation').value);\r\n    applyFilters();\r\n}\r\n\r\nfunction updateDrawingStyle() {\r\n    // This is handled in the draw function\r\n}\r\n\r\nfunction applyFilters() {\r\n    if (!image) return;\r\n    \r\n    resizeCanvas();\r\n    \r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    // Save context\r\n    ctx.save();\r\n    \r\n    // Apply rotation\r\n    ctx.translate(canvas.width / 2, canvas.height / 2);\r\n    ctx.rotate(rotation * Math.PI / 180);\r\n    ctx.translate(-canvas.width / 2, -canvas.height / 2);\r\n    \r\n    // Draw image\r\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // Apply filters if needed (for more advanced filters, you'd use getImageData)\r\n    if (brightness !== 0 || contrast !== 0 || saturation !== 0) {\r\n        // Simple brightness adjustment\r\n        if (brightness !== 0) {\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${brightness / 100})`;\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n    }\r\n    \r\n    // Restore context\r\n    ctx.restore();\r\n}\r\n\r\nfunction resizeCanvas() {\r\n    if (!image) return;\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n}\r\n\r\nfunction saveEdit() {\r\n    if (!canvas) {\r\n        alert('Editor not initialized');\r\n        return;\r\n    }\r\n    \r\n    const dataURL = canvas.toDataURL('image/jpeg', 0.9);\r\n    \r\n    fetch('/api/save-edit', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            photo_id: photoId,\r\n            image_data: dataURL\r\n        })\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (data.success) {\r\n            alert('Changes saved successfully!');\r\n        } else {\r\n            alert('Failed to save changes: ' + (data.error || 'Unknown error'));\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('Save error:', error);\r\n        alert('Save error: ' + error.message);\r\n    });\r\n}\r\n\r\nfunction resetImage() {\r\n    // Reset all controls\r\n    document.getElementById('brightness').value = 0;\r\n    document.getElementById('contrast').value = 0;\r\n    document.getElementById('saturation').value = 0;\r\n    document.getElementById('rotation').value = 0;\r\n    \r\n    brightness = 0;\r\n    contrast = 0;\r\n    saturation = 0;\r\n    rotation = 0;\r\n    \r\n    // Reload image\r\n    const img = document.getElementById('sourceImage');\r\n    image.src = img.src;\r\n}\r\n\r\n// Initialize editor when page loads\r\ndocument.addEventListener('DOMContentLoaded', initEditor);\r\n","size_bytes":8796},"static/js/main.js":{"content":"// photovault/static/js/main.js\r\n\r\n// REMOVE OR COMMENT OUT any existing upload-related JavaScript like:\r\n\r\n/*\r\n// OLD CODE - REMOVE THIS TO PREVENT CONFLICTS\r\nfunction triggerUpload() {\r\n    document.getElementById('fileInput').click();\r\n}\r\n\r\ndocument.getElementById('uploadBtn').addEventListener('click', triggerUpload);\r\n// END OF CODE TO REMOVE\r\n*/\r\n\r\n// Keep only non-upload related JavaScript here\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // Other PhotoVault functionality (navigation, search, etc.)\r\n    console.log('PhotoVault main.js loaded');\r\n    \r\n    // Example: Navigation highlighting\r\n    const currentPath = window.location.pathname;\r\n    const navLinks = document.querySelectorAll('.nav-link');\r\n    \r\n    navLinks.forEach(link => {\r\n        if (link.getAttribute('href') === currentPath) {\r\n            link.classList.add('active');\r\n        }\r\n    });\r\n});","size_bytes":900},"static/js/upload.js":{"content":"/**\r\n * PhotoVault Upload & Camera Handler - Clean Implementation\r\n * Fixes all conflicting implementations and provides unified functionality\r\n */\r\n\r\nclass PhotoVaultUploader {\r\n    constructor() {\r\n        // State management\r\n        this.selectedFiles = [];\r\n        this.capturedPhotos = [];\r\n        this.isUploading = false;\r\n        this.currentStream = null;\r\n        this.availableCameras = [];\r\n        this.maxFileSize = 16 * 1024 * 1024; // 16MB\r\n        this.allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\r\n        \r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        console.log('PhotoVault Uploader: Initializing...');\r\n        this.bindEvents();\r\n        this.initializeCamera().catch(err => {\r\n            console.warn('Camera initialization failed:', err);\r\n        });\r\n    }\r\n    \r\n    bindEvents() {\r\n        // File input events\r\n        const fileInput = document.getElementById('file');\r\n        const uploadForm = document.getElementById('uploadForm');\r\n        const uploadArea = document.getElementById('uploadArea');\r\n        \r\n        if (fileInput) {\r\n            fileInput.addEventListener('change', (e) => this.handleFileSelection(e));\r\n        }\r\n        \r\n        if (uploadForm) {\r\n            uploadForm.addEventListener('submit', (e) => this.handleFormSubmit(e));\r\n        }\r\n        \r\n        if (uploadArea) {\r\n            // Click to select files\r\n            uploadArea.addEventListener('click', (e) => {\r\n                if (e.target !== fileInput) {\r\n                    fileInput?.click();\r\n                }\r\n            });\r\n            \r\n            // Drag and drop\r\n            this.setupDragAndDrop(uploadArea);\r\n        }\r\n        \r\n        // Camera events\r\n        this.bindCameraEvents();\r\n    }\r\n    \r\n    bindCameraEvents() {\r\n        const startCameraBtn = document.getElementById('startCameraBtn');\r\n        const captureBtn = document.getElementById('captureBtn');\r\n        const cameraSelect = document.getElementById('cameraSelect');\r\n        \r\n        if (startCameraBtn) {\r\n            startCameraBtn.addEventListener('click', () => this.startCamera());\r\n        }\r\n        \r\n        if (captureBtn) {\r\n            captureBtn.addEventListener('click', () => this.capturePhoto());\r\n        }\r\n        \r\n        if (cameraSelect) {\r\n            cameraSelect.addEventListener('change', () => this.onCameraSelected());\r\n        }\r\n    }\r\n    \r\n    async initializeCamera() {\r\n        if (!navigator.mediaDevices?.getUserMedia) {\r\n            console.log('Camera not supported');\r\n            this.disableCameraUI('Camera not supported in this browser');\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            // Request permission and enumerate devices\r\n            await navigator.mediaDevices.getUserMedia({ video: true });\r\n            await this.enumerateCameras();\r\n        } catch (error) {\r\n            console.error('Camera initialization error:', error);\r\n            this.disableCameraUI('Camera permission denied');\r\n        }\r\n    }\r\n    \r\n    async enumerateCameras() {\r\n        try {\r\n            const devices = await navigator.mediaDevices.enumerateDevices();\r\n            this.availableCameras = devices.filter(device => device.kind === 'videoinput');\r\n            const cameraSelect = document.getElementById('cameraSelect');\r\n            \r\n            if (cameraSelect && this.availableCameras.length > 0) {\r\n                cameraSelect.innerHTML = '<option value=\"\">Select Camera...</option>';\r\n                this.availableCameras.forEach((camera, index) => {\r\n                    const option = document.createElement('option');\r\n                    option.value = camera.deviceId;\r\n                    option.textContent = camera.label || `Camera ${index + 1}`;\r\n                    cameraSelect.appendChild(option);\r\n                });\r\n                \r\n                // Auto-select first camera\r\n                if (this.availableCameras.length === 1) {\r\n                    cameraSelect.value = this.availableCameras[0].deviceId;\r\n                }\r\n            } else {\r\n                this.disableCameraUI('No cameras found');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error enumerating cameras:', error);\r\n            this.disableCameraUI('Could not access cameras');\r\n        }\r\n    }\r\n    \r\n    disableCameraUI(message) {\r\n        const cameraSelect = document.getElementById('cameraSelect');\r\n        const startCameraBtn = document.getElementById('startCameraBtn');\r\n        \r\n        if (cameraSelect) {\r\n            cameraSelect.innerHTML = `<option value=\"\">${message}</option>`;\r\n            cameraSelect.disabled = true;\r\n        }\r\n        \r\n        if (startCameraBtn) {\r\n            startCameraBtn.disabled = true;\r\n            startCameraBtn.textContent = message;\r\n        }\r\n    }\r\n    \r\n    onCameraSelected() {\r\n        const startCameraBtn = document.getElementById('startCameraBtn');\r\n        const cameraSelect = document.getElementById('cameraSelect');\r\n        \r\n        if (startCameraBtn && cameraSelect) {\r\n            startCameraBtn.disabled = !cameraSelect.value;\r\n            startCameraBtn.textContent = cameraSelect.value ? 'Start Camera' : 'Select Camera First';\r\n        }\r\n    }\r\n    \r\n    async startCamera() {\r\n        const cameraSelect = document.getElementById('cameraSelect');\r\n        const video = document.getElementById('cameraVideo');\r\n        const captureBtn = document.getElementById('captureBtn');\r\n        const startCameraBtn = document.getElementById('startCameraBtn');\r\n        \r\n        if (!cameraSelect?.value) {\r\n            this.showMessage('Please select a camera', 'warning');\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            // Stop existing stream\r\n            this.stopCamera();\r\n            \r\n            const constraints = {\r\n                video: {\r\n                    deviceId: { exact: cameraSelect.value },\r\n                    width: { ideal: 1280 },\r\n                    height: { ideal: 720 }\r\n                }\r\n            };\r\n            \r\n            this.currentStream = await navigator.mediaDevices.getUserMedia(constraints);\r\n            \r\n            if (video) {\r\n                video.srcObject = this.currentStream;\r\n                video.style.display = 'block';\r\n            }\r\n            \r\n            if (captureBtn) {\r\n                captureBtn.style.display = 'block';\r\n            }\r\n            \r\n            if (startCameraBtn) {\r\n                startCameraBtn.textContent = 'Stop Camera';\r\n                startCameraBtn.onclick = () => this.stopCamera();\r\n            }\r\n            \r\n            this.showMessage('Camera started successfully', 'success');\r\n        } catch (error) {\r\n            console.error('Camera start error:', error);\r\n            this.handleCameraError(error);\r\n        }\r\n    }\r\n    \r\n    stopCamera() {\r\n        if (this.currentStream) {\r\n            this.currentStream.getTracks().forEach(track => track.stop());\r\n            this.currentStream = null;\r\n        }\r\n        \r\n        const video = document.getElementById('cameraVideo');\r\n        const captureBtn = document.getElementById('captureBtn');\r\n        const startCameraBtn = document.getElementById('startCameraBtn');\r\n        \r\n        if (video) {\r\n            video.style.display = 'none';\r\n            video.srcObject = null;\r\n        }\r\n        \r\n        if (captureBtn) {\r\n            captureBtn.style.display = 'none';\r\n        }\r\n        \r\n        if (startCameraBtn) {\r\n            startCameraBtn.textContent = 'Start Camera';\r\n            startCameraBtn.onclick = () => this.startCamera();\r\n        }\r\n    }\r\n    \r\n    handleCameraError(error) {\r\n        let message = 'Camera error occurred';\r\n        \r\n        switch (error.name) {\r\n            case 'NotAllowedError':\r\n                message = 'Camera permission denied. Please allow camera access and try again.';\r\n                break;\r\n            case 'NotFoundError':\r\n                message = 'No camera found. Please check your camera connection.';\r\n                break;\r\n            case 'NotReadableError':\r\n                message = 'Camera is being used by another application.';\r\n                break;\r\n            case 'OverconstrainedError':\r\n                message = 'Camera constraints not supported. Try a different camera.';\r\n                break;\r\n        }\r\n        \r\n        this.showMessage(message, 'error');\r\n    }\r\n    \r\n    capturePhoto() {\r\n        const video = document.getElementById('cameraVideo');\r\n        const canvas = document.getElementById('captureCanvas');\r\n        \r\n        if (!video || !canvas || !this.currentStream) {\r\n            this.showMessage('Camera not ready', 'error');\r\n            return;\r\n        }\r\n        \r\n        const context = canvas.getContext('2d');\r\n        \r\n        // Set canvas dimensions to match video\r\n        canvas.width = video.videoWidth;\r\n        canvas.height = video.videoHeight;\r\n        \r\n        if (canvas.width === 0 || canvas.height === 0) {\r\n            this.showMessage('Could not capture photo - invalid dimensions', 'error');\r\n            return;\r\n        }\r\n        \r\n        // Draw current frame\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n        // Auto-save to database: Upload immediately\r\n        canvas.toBlob((blob) => {\r\n            if (!blob) {\r\n                this.showMessage('Failed to capture photo', 'error');\r\n                return;\r\n            }\r\n\r\n            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n            const file = new File([blob], `camera-photo-${timestamp}.jpg`, { type: 'image/jpeg' });\r\n\r\n            // Immediately upload single file\r\n            this.uploadSingleFile(file)\r\n                .then(() => {\r\n                    // Add to UI state for visual feedback\r\n                    this.capturedPhotos.push(file);\r\n                    this.selectedFiles.push(file);\r\n                    this.updateFileDisplay();\r\n                    this.showMessage('Photo saved to database!', 'success');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Auto-upload failed:', error);\r\n                    this.showMessage('Failed to save photo to database.', 'error');\r\n                });\r\n        }, 'image/jpeg', 0.9);\r\n    }\r\n    \r\n    async uploadSingleFile(file) {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        \r\n        // Add CSRF token if available\r\n        const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.content \r\n                       || document.querySelector('input[name=\"csrf_token\"]')?.value;\r\n        if (csrfToken) {\r\n            formData.append('csrf_token', csrfToken);\r\n        }\r\n        \r\n        try {\r\n            const response = await fetch('/upload', {\r\n                method: 'POST',\r\n                body: formData,\r\n                headers: {\r\n                    'X-Requested-With': 'XMLHttpRequest'\r\n                }\r\n            });\r\n            \r\n            const data = await response.json();\r\n            \r\n            if (response.ok && data.success) {\r\n                return data;\r\n            } else {\r\n                throw new Error(data.message || 'Upload failed');\r\n            }\r\n        } catch (error) {\r\n            console.error('Upload error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    handleFileSelection(event) {\r\n        const files = Array.from(event.target.files || []);\r\n        \r\n        if (files.length === 0) {\r\n            return;\r\n        }\r\n        \r\n        const validFiles = this.validateFiles(files);\r\n        \r\n        if (validFiles.length === 0) {\r\n            this.showMessage('No valid image files selected', 'warning');\r\n            return;\r\n        }\r\n        \r\n        this.selectedFiles = [...this.selectedFiles, ...validFiles];\r\n        this.updateFileDisplay();\r\n        \r\n        const message = validFiles.length === 1 \r\n            ? `Selected: ${validFiles[0].name}`\r\n            : `Selected ${validFiles.length} files`;\r\n        this.showMessage(message, 'success');\r\n    }\r\n    \r\n    validateFiles(files) {\r\n        return files.filter(file => {\r\n            if (!this.allowedTypes.includes(file.type.toLowerCase())) {\r\n                this.showMessage(`${file.name}: Invalid file type`, 'error');\r\n                return false;\r\n            }\r\n            \r\n            if (file.size > this.maxFileSize) {\r\n                this.showMessage(`${file.name}: File too large (max 16MB)`, 'error');\r\n                return false;\r\n            }\r\n            \r\n            return true;\r\n        });\r\n    }\r\n    \r\n    updateFileDisplay() {\r\n        const fileCount = document.getElementById('fileCount');\r\n        const selectedFilesArea = document.getElementById('selectedFilesArea');\r\n        const uploadBtn = document.getElementById('uploadBtn');\r\n        const clearFilesBtn = document.getElementById('clearFilesBtn');\r\n        \r\n        if (fileCount) {\r\n            fileCount.textContent = this.selectedFiles.length;\r\n        }\r\n        \r\n        if (selectedFilesArea) {\r\n            if (this.selectedFiles.length > 0) {\r\n                selectedFilesArea.style.display = 'block';\r\n                this.renderFilePreview();\r\n            } else {\r\n                selectedFilesArea.style.display = 'none';\r\n            }\r\n        }\r\n        \r\n        if (uploadBtn) {\r\n            uploadBtn.disabled = this.selectedFiles.length === 0 || this.isUploading;\r\n        }\r\n        \r\n        if (clearFilesBtn) {\r\n            clearFilesBtn.disabled = this.selectedFiles.length === 0;\r\n        }\r\n    }\r\n    \r\n    renderFilePreview() {\r\n        const container = document.getElementById('filePreviewContainer');\r\n        if (!container) return;\r\n        \r\n        container.innerHTML = '';\r\n        \r\n        this.selectedFiles.forEach((file, index) => {\r\n            const fileItem = document.createElement('div');\r\n            fileItem.className = 'file-item d-flex align-items-center justify-content-between p-2 border rounded mb-2';\r\n            \r\n            fileItem.innerHTML = `\r\n                <div class=\"d-flex align-items-center\">\r\n                    <i class=\"fas fa-image text-primary me-2\"></i>\r\n                    <div>\r\n                        <div class=\"fw-semibold\">${file.name}</div>\r\n                        <small class=\"text-muted\">${this.formatFileSize(file.size)}</small>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" class=\"btn btn-sm btn-outline-danger\" onclick=\"photoVaultUploader.removeFile(${index})\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n            `;\r\n            \r\n            container.appendChild(fileItem);\r\n        });\r\n    }\r\n    \r\n    removeFile(index) {\r\n        this.selectedFiles.splice(index, 1);\r\n        this.updateFileDisplay();\r\n        this.showMessage('File removed', 'info');\r\n    }\r\n    \r\n    clearFiles() {\r\n        this.selectedFiles = [];\r\n        this.updateFileDisplay();\r\n        this.showMessage('All files cleared', 'info');\r\n        \r\n        // Clear file input\r\n        const fileInput = document.getElementById('file');\r\n        if (fileInput) {\r\n            fileInput.value = '';\r\n        }\r\n    }\r\n    \r\n    async handleFormSubmit(event) {\r\n        event.preventDefault();\r\n        \r\n        if (this.selectedFiles.length === 0) {\r\n            this.showMessage('Please select files to upload', 'warning');\r\n            return;\r\n        }\r\n        \r\n        if (this.isUploading) {\r\n            return;\r\n        }\r\n        \r\n        this.isUploading = true;\r\n        this.showProgress();\r\n        \r\n        try {\r\n            const formData = new FormData();\r\n            \r\n            // Add all selected files\r\n            this.selectedFiles.forEach(file => {\r\n                formData.append('file', file);\r\n            });\r\n            \r\n            // Add CSRF token\r\n            const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.content \r\n                           || document.querySelector('input[name=\"csrf_token\"]')?.value;\r\n            if (csrfToken) {\r\n                formData.append('csrf_token', csrfToken);\r\n            }\r\n            \r\n            const response = await fetch('/upload', {\r\n                method: 'POST',\r\n                body: formData\r\n            });\r\n            \r\n            const data = await response.json();\r\n            \r\n            if (response.ok && data.success) {\r\n                this.showMessage(data.message || 'Upload successful!', 'success');\r\n                this.selectedFiles = [];\r\n                this.updateFileDisplay();\r\n                \r\n                // Clear file input\r\n                const fileInput = document.getElementById('file');\r\n                if (fileInput) {\r\n                    fileInput.value = '';\r\n                }\r\n                \r\n                // Redirect to dashboard after delay\r\n                setTimeout(() => {\r\n                    window.location.href = '/dashboard';\r\n                }, 1500);\r\n            } else {\r\n                throw new Error(data.message || 'Upload failed');\r\n            }\r\n        } catch (error) {\r\n            console.error('Upload error:', error);\r\n            this.showMessage(error.message || 'Upload failed. Please try again.', 'error');\r\n        } finally {\r\n            this.isUploading = false;\r\n            this.hideProgress();\r\n        }\r\n    }\r\n    \r\n    setupDragAndDrop(uploadArea) {\r\n        const events = ['dragenter', 'dragover', 'dragleave', 'drop'];\r\n        \r\n        events.forEach(eventName => {\r\n            uploadArea.addEventListener(eventName, (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            });\r\n        });\r\n        \r\n        uploadArea.addEventListener('dragenter', () => {\r\n            uploadArea.classList.add('drag-over');\r\n        });\r\n        \r\n        uploadArea.addEventListener('dragleave', (e) => {\r\n            if (!uploadArea.contains(e.relatedTarget)) {\r\n                uploadArea.classList.remove('drag-over');\r\n            }\r\n        });\r\n        \r\n        uploadArea.addEventListener('drop', (e) => {\r\n            uploadArea.classList.remove('drag-over');\r\n            \r\n            const files = Array.from(e.dataTransfer.files);\r\n            if (files.length > 0) {\r\n                const validFiles = this.validateFiles(files);\r\n                if (validFiles.length > 0) {\r\n                    this.selectedFiles = [...this.selectedFiles, ...validFiles];\r\n                    this.updateFileDisplay();\r\n                    this.showMessage(`Added ${validFiles.length} files`, 'success');\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    showProgress() {\r\n        const uploadProgress = document.getElementById('uploadProgress');\r\n        const progressBar = document.getElementById('progressBar');\r\n        const progressText = document.getElementById('progressText');\r\n        const uploadBtn = document.getElementById('uploadBtn');\r\n        \r\n        if (uploadProgress) {\r\n            uploadProgress.style.display = 'block';\r\n        }\r\n        \r\n        if (progressBar) {\r\n            progressBar.style.width = '0%';\r\n            progressBar.setAttribute('aria-valuenow', '0');\r\n        }\r\n        \r\n        if (progressText) {\r\n            progressText.textContent = 'Uploading...';\r\n        }\r\n        \r\n        if (uploadBtn) {\r\n            uploadBtn.disabled = true;\r\n        }\r\n        \r\n        // Simulate progress\r\n        let progress = 0;\r\n        const interval = setInterval(() => {\r\n            progress += Math.random() * 30;\r\n            if (progress > 90) progress = 90;\r\n            \r\n            if (progressBar) {\r\n                progressBar.style.width = `${progress}%`;\r\n                progressBar.setAttribute('aria-valuenow', progress.toString());\r\n            }\r\n            \r\n            if (progress >= 90) {\r\n                clearInterval(interval);\r\n            }\r\n        }, 500);\r\n    }\r\n    \r\n    hideProgress() {\r\n        const uploadProgress = document.getElementById('uploadProgress');\r\n        const progressBar = document.getElementById('progressBar');\r\n        const uploadBtn = document.getElementById('uploadBtn');\r\n        \r\n        if (uploadProgress) {\r\n            uploadProgress.style.display = 'none';\r\n        }\r\n        \r\n        if (progressBar) {\r\n            progressBar.style.width = '100%';\r\n            progressBar.setAttribute('aria-valuenow', '100');\r\n        }\r\n        \r\n        if (uploadBtn) {\r\n            uploadBtn.disabled = this.selectedFiles.length === 0;\r\n        }\r\n    }\r\n    \r\n    showMessage(message, type = 'info') {\r\n        const container = document.getElementById('uploadMessages');\r\n        if (!container) {\r\n            console.log(`[${type.toUpperCase()}] ${message}`);\r\n            return;\r\n        }\r\n        \r\n        const alertClass = type === 'error' ? 'danger' : type;\r\n        const alert = document.createElement('div');\r\n        alert.className = `alert alert-${alertClass} alert-dismissible fade show`;\r\n        alert.innerHTML = `\r\n            ${message}\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\r\n        `;\r\n        \r\n        container.appendChild(alert);\r\n        \r\n        // Auto-dismiss after 5 seconds for success/info messages\r\n        if (type === 'success' || type === 'info') {\r\n            setTimeout(() => {\r\n                if (alert.parentNode) {\r\n                    alert.remove();\r\n                }\r\n            }, 5000);\r\n        }\r\n    }\r\n    \r\n    formatFileSize(bytes) {\r\n        if (bytes === 0) return '0 Bytes';\r\n        \r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        \r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    }\r\n}\r\n\r\n// Initialize when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    window.photoVaultUploader = new PhotoVaultUploader();\r\n});","size_bytes":22250}},"version":1}